Тепер я хочу перетворити його на desktop-застосунок "TechCare" із Tkinter, замінивши Streamlit. Програма має моніторити ПК (температура, CPU, RAM, диск, час роботи, вентилятори), прогнозувати проблеми через AI, виправляти їх, мати гейміфікацію, бенчмаркінг і планувальник. Доповни існуючий код, не переписуючи його повністю. Ось що потрібно:

Загальні вимоги:
Зберігай існуючі файли, але адаптуй їх для Tkinter.
Додай бібліотеки: tkinter, winsound, якщо їх немає в requirements.txt.
Код українською мовою.
Додай # -*- coding: utf-8 -*-.
Забезпеч сумісність із Windows (Python 3.11) для локального запуску та .exe через PyInstaller.
monitor.py:
Доповни get_system_data():
Додай температуру (через psutil.sensors_temperatures() або psutil.cpu_percent() як замінник).
Додай швидкість вентилятора (через psutil.sensors_fans(), якщо недоступно — None).
Зберігай існуючі дані (CPU, RAM, диск).
ai_engine.py:
Доповни AIEngine:
У predict_problems() додай:
Температура > 70°C (або CPU > 80%) протягом 30 хвилин: "Охолодіть систему!".
RAM > 90% протягом 15 хвилин: "Закрийте програми або перезапустіть".
Диск > 90%: "Очистіть файли".
Час роботи > 24 години: "Перезапустіть для стабільності".
У calculate_health_score() враховуй температуру.
Використовуй state для лічильників часу.
auto_repair.py:
Доповни AutoRepair:
Додай kill_high_cpu_processes() для завершення процесів із CPU > 80% (через psutil).
Зберігай існуючий fix_temp_files().
gamification.py:
Доповни GamificationSystem:
Додай досягнення: "Майстер очищення" (5 ремонтів, 30 балів).
Інтегруй із PostgreSQL (таблиця achievements для збереження статистики).
Зберігай існуючі досягнення.
benchmarking.py:
Доповни BenchmarkSystem:
Додай run_disk_test() (швидкість читання/запису через psutil.disk_io_counters()).
Зберігай існуючі run_cpu_test() і run_memory_test().
scheduler.py:
Доповни TaskScheduler:
Додай типи завдань: щотижнева дефрагментація, місячна діагностика.
Інтегруй із PostgreSQL (таблиця scheduled_tasks).
Зберігай існуючу логіку.
gui.py (новий файл):
Створи create_gui(update_callback):
Назва: "TechCare".
Розмір: 400x500.
Фон: Градієнт #1E1E1E–#2D2D2D.
Заголовок: "TechCare" (Roboto Bold 16, #00DDEB).
Підзаголовок: "Твій помічник для догляду за ПК" (Roboto 10, #BBBBBB).
Вкладки (Notebook): "Головна", "AI Аналітика", "Ремонт", "Досягнення", "Тести", "Розклад".
Вкладка "Головна": Показники (температура, час роботи, RAM, диск, вентилятори) у прямокутниках (Frame, обводка #00DDEB).
Вкладка "AI Аналітика": Прогнози і оцінка здоров’я.
Вкладка "Ремонт": Кнопки "Діагностика", "Виправити", список проблем.
Вкладка "Досягнення": Список досягнень і рівень.
Вкладка "Тести": Кнопки для тестів CPU, RAM, диска.
Вкладка "Розклад": Список завдань і кнопка "Додати".
Кнопки: "Очистити", "Відкласти", "Деталі", "Оновити" (Roboto 10, фон #333333, наведення #00DDEB).
Сповіщення: Анімоване спливання (#FF6347, білий фон) зі звуком winsound.Beep(1000, 500).
main.py (заміни my_app.py):
Імпортуй усі модулі.
Ініціалізуй PostgreSQL (таблиці: system_data, achievements, scheduled_tasks).
Створи thresholds і state.
Запусти GUI і перевірку порогів.
Додай автодіагностику при запуску.
Додай коментарі:
python

Копировать
# Для локального запуску:
# 1. Встанови Python 3.11 і бібліотеки: pip install psutil schedule tkinter winsound psycopg2-binary scikit-learn numpy
# 2. Запусти: python main.py
# Для .exe:
# 1. Встанови PyInstaller: pip install pyinstaller
# 2. Скомпілюй: pyinstaller --onefile main.py
Будь ласка, доповни мої існуючі файли з "Diplom.txt" відповідно до цих вимог. Переконайся, що код працює на Replit, а потім його можна завантажити і запустити локально на Windows із компіляцією в .exe. Якщо потрібні уточнення, питай!