# -*- coding: utf-8 -*-
"""
SystemWatch Pro - –ú–æ—è –¥–∏–ø–ª–æ–º–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞
–ù–∞–ø–∏—Å–∞–≤ —Å–∞–º –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –∫–æ–º–ø'—é—Ç–µ—Ä–∞
TODO: –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ —Ñ—É–Ω–∫—Ü—ñ–π –∫–æ–ª–∏ –±—É–¥–µ —á–∞—Å
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from datetime import datetime
import time

# –º–æ—ó –º–æ–¥—É–ª—ñ
from simple_monitor import get_system_data
from data_manager import DataManager
from simple_ai import SimpleAI
from simple_achievements import SimpleAchievements
from simple_tests import SimpleTests
from simple_repair import SimpleRepair

# –º–æ—ó —ñ–∫–æ–Ω–∫–∏
from icons import *
from student_style import *

def init_my_app():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ—î—ó –ø—Ä–æ–≥—Ä–∞–º–∏"""
    # TODO: –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Ü–µ –ø—ñ–∑–Ω—ñ—à–µ
    if 'data_manager' not in st.session_state:
        st.session_state.data_manager = DataManager()
        st.session_state.ai_engine = SimpleAI(st.session_state.data_manager)
        st.session_state.achievements = SimpleAchievements(st.session_state.data_manager)
        st.session_state.tests = SimpleTests(st.session_state.data_manager)
        st.session_state.repair = SimpleRepair()

def show_main_page():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
    st.markdown("## –ì–æ–ª–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å")
    st.markdown("*–¢—É—Ç –ø–æ–∫–∞–∑—É—é—Ç—å—Å—è –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ–º–ø'—é—Ç–µ—Ä*")
    
    # –æ—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
    data = get_system_data()
    
    # –ø—Ä–æ—Å—Ç–∏–π —Å–ø–æ—Å—ñ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(get_simple_metric("CPU", f"{data['cpu_percent']:.1f}%", get_cpu_icon()), unsafe_allow_html=True)
    
    with col2:
        st.markdown(get_simple_metric("RAM", f"{data['ram_percent']:.1f}%", get_ram_icon()), unsafe_allow_html=True)
    
    with col3:
        st.markdown(get_simple_metric("–î–∏—Å–∫", f"{data['disk_percent']:.1f}%", get_disk_icon()), unsafe_allow_html=True)
    
    # AI –∞–Ω–∞–ª—ñ–∑
    st.markdown("### AI –∞–Ω–∞–ª—ñ–∑")
    warnings = st.session_state.ai_engine.predict_system_health(data)
    
    if warnings.get('warnings', []):
        st.warning("–ó–Ω–∞–π–¥–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏:")
        for warning in warnings['warnings']:
            st.write(f"‚Ä¢ {warning}")
    else:
        st.success("–í—Å–µ –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ!")
    
    # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ –±–∞–∑—É
    st.session_state.data_manager.save_system_data(data)
    
    # TODO: –¥–æ–¥–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏

def show_ai_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ AI"""
    st.markdown("## AI –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞")
    st.markdown("*–¢—É—Ç —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç –∞–Ω–∞–ª—ñ–∑—É—î —Å–∏—Å—Ç–µ–º—É*")
    
    data = get_system_data()
    prediction = st.session_state.ai_engine.predict_system_health(data)
    
    # –ø–æ–∫–∞–∑—É—î–º–æ —Å–∫–æ—Ä –∑–¥–æ—Ä–æ–≤'—è
    health_score = prediction.get('health_score', 85)
    st.metric("–Ü–Ω–¥–µ–∫—Å –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏", f"{health_score}%")
    
    # –ø—Ä–æ–≥–Ω–æ–∑–∏
    if prediction.get('predictions'):
        st.subheader("–ü—Ä–æ–≥–Ω–æ–∑–∏")
        for pred in prediction['predictions']:
            st.info(f"üìä {pred}")

def show_repair_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ —Ä–µ–º–æ–Ω—Ç—É"""
    st.markdown("## –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–µ–º–æ–Ω—Ç")
    st.markdown("*–ü—Ä–æ–≥—Ä–∞–º–∞ —Å–∞–º–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª—è—î –ø—Ä–æ–±–ª–µ–º–∏*")
    
    if st.button("–î—ñ–∞–≥–Ω–æ—Å—Ç—É–≤–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É"):
        with st.spinner("–®—É–∫–∞—é –ø—Ä–æ–±–ª–µ–º–∏..."):
            issues = st.session_state.repair.diagnose_system()
        
        if issues:
            st.warning(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(issues)} –ø—Ä–æ–±–ª–µ–º:")
            for i, issue in enumerate(issues, 1):
                st.write(f"{i}. {issue['description']}")
                if issue.get('fixable') and st.button(f"–í–∏–ø—Ä–∞–≤–∏—Ç–∏ #{i}"):
                    result = st.session_state.repair.auto_fix_issue(issue)
                    if result:
                        st.success("–í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                    else:
                        st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–ø—Ä–∞–≤–∏—Ç–∏")
        else:
            st.success("–ü—Ä–æ–±–ª–µ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")

def show_achievements_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å"""
    st.markdown("## –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è")
    st.markdown("*–Ø–∫ –≤ —ñ–≥—Ä–∞—Ö - –Ω–∞–±–∏—Ä–∞—î—à –æ—á–∫–∏ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏*")
    
    # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    stats = st.session_state.data_manager.get_user_stats()
    
    col1, col2 = st.columns(2)
    with col1:
        st.metric("–†—ñ–≤–µ–Ω—å", stats.get('level', 1))
    with col2:
        st.metric("–û—á–∫–∏", stats.get('total_points', 0))
    
    # –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
    current_points = stats.get('total_points', 0)
    points_to_next = ((stats.get('level', 1)) * 100) - current_points
    progress = min(current_points % 100 / 100, 1.0)
    st.progress(progress)
    st.write(f"–î–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è: {max(0, points_to_next)} –æ—á–æ–∫")

def show_tests_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ —Ç–µ—Å—Ç—ñ–≤"""
    st.markdown("## –¢–µ—Å—Ç–∏ —à–≤–∏–¥–∫–æ—Å—Ç—ñ")
    st.markdown("*–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—Å–∫—ñ–ª—å–∫–∏ —à–≤–∏–¥–∫–∏–π —Ç–≤—ñ–π –∫–æ–º–ø'—é—Ç–µ—Ä*")
    
    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç"):
        with st.spinner("–¢–µ—Å—Ç—É—é..."):
            results = st.session_state.tests.run_benchmark()
        
        st.success("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("CPU", f"{results.get('cpu_score', 0):.0f}/100")
        with col2:
            st.metric("RAM", f"{results.get('ram_score', 0):.0f}/100")
        with col3:
            st.metric("–ó–∞–≥–∞–ª—å–Ω–∏–π", f"{results.get('overall_score', 0):.0f}/100")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –º–æ—î—ó –ø—Ä–æ–≥—Ä–∞–º–∏"""
    st.set_page_config(
        page_title="SystemWatch Pro",
        layout="wide"
    )
    
    # —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    init_my_app()
    
    # –∑–∞–≥–æ–ª–æ–≤–æ–∫
    col1, col2 = st.columns([1, 10])
    with col1:
        st.markdown(get_dashboard_icon(), unsafe_allow_html=True)
    with col2:
        st.title("SystemWatch Pro")
        st.markdown("### –ú–æ—è –ø—Ä–æ–≥—Ä–∞–º–∞ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∫–æ–º–ø'—é—Ç–µ—Ä–∞")
    
    # –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è (–±–µ–∑ –µ–º–æ–¥–∂—ñ)
    with st.sidebar:
        st.header("–ú–µ–Ω—é")
        
        # –ø—Ä–æ—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        page = st.selectbox(
            "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:",
            [
                "–ì–æ–ª–æ–≤–Ω–∞",
                "AI –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", 
                "–†–µ–º–æ–Ω—Ç",
                "–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è",
                "–¢–µ—Å—Ç–∏"
            ]
        )
        
        # –∫–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if st.button("–û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ"):
            st.rerun()
    
    # –ø–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—Ä–∞–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    if page == "–ì–æ–ª–æ–≤–Ω–∞":
        show_main_page()
    elif page == "AI –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞":
        show_ai_page()
    elif page == "–†–µ–º–æ–Ω—Ç":
        show_repair_page()
    elif page == "–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è":
        show_achievements_page()
    elif page == "–¢–µ—Å—Ç–∏":
        show_tests_page()

if __name__ == "__main__":
    main()