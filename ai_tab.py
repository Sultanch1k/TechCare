import tkinter as tk
from tkinter import ttk
from monitor import get_system_data, get_network_data
from tests import SimpleTests

class AITab:
    def __init__(self, parent, app_ref):
        self.frame = ttk.Frame(parent, style='Modern.TFrame')
        self.app_ref = app_ref  # –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫ –∑ ai_engine
        self.build_ui()
        self.init_ai_engine() 

    def build_ui(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –Ω–µ–æ–Ω–æ–≤–∏–º –µ—Ñ–µ–∫—Ç–æ–º
        title = tk.Label(self.frame, text="ü§ñ AI –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞",
                         font=('Roboto', 16, 'bold'),
                         fg='#00DDEB', bg='#0F0F0F')
        title.pack(pady=(15, 10), fill='x')

        # –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤'—è AI (—Å—Ç–≤–æ—Ä—é—î–º–æ health_label)
        self.health_label = tk.Label(self.frame, text="üß† –Ü–Ω–¥–µ–∫—Å –∑–¥–æ—Ä–æ–≤'—è: --%", 
                                     font=('Roboto', 12), fg='#00FF66', bg='#0F0F0F')
        self.health_label.pack(pady=(0, 10))

        # –°—Ç–∞—Ç—É—Å —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä (–∫—Ä—É–≥)
        self.status_indicator = tk.Canvas(self.frame, width=20, height=20, bg='#0F0F0F', highlightthickness=0)
        self.status_indicator.pack(pady=(0, 10))

        # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –∑ –Ω–µ–æ–Ω–æ–≤–∏–º —Ñ–æ–Ω–æ–º
        self.predictions_text = tk.Text(self.frame, height=15,
                                        bg='#1A1A1A', fg='#00FF66',
                                        font=('Consolas', 12),
                                        insertbackground='#00FF66',
                                        relief='flat', bd=2,
                                        highlightbackground='#00DDEB',
                                        highlightcolor='#00DDEB',
                                        highlightthickness=2)
        self.predictions_text.pack(fill='both', expand=True, padx=15, pady=10)

        # –¢–µ–≥–∏ –¥–ª—è —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É
        self.predictions_text.tag_configure('bold', font=('Consolas', 12, 'bold'))
        self.predictions_text.tag_configure('warning', foreground='#FFA500')
        self.predictions_text.tag_configure('prediction', foreground='#00FFFF')
        self.predictions_text.tag_configure('error', foreground='#FF4444')
        self.predictions_text.tag_configure('success', foreground='#00FF00')

        # –ö–Ω–æ–ø–∫–∏ –≤ —Å—Ç–∏–ª—ñ –Ω–µ–æ–Ω—É
        button_frame = tk.Frame(self.frame, bg='#0F0F0F')
        button_frame.pack(pady=15)

        refresh_btn = tk.Button(button_frame, text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ AI –∞–Ω–∞–ª—ñ–∑",
                                font=('Roboto', 12, 'bold'),
                                bg='#2D2D2D', fg='#FFFFFF',
                                activebackground='#00DDEB',
                                activeforeground='#000000',
                                relief='solid', bd=2,
                                highlightbackground='#00DDEB',
                                highlightthickness=2,
                                command=self.run_ai_analysis,
                                padx=30, pady=10,
                                cursor='hand2')
        refresh_btn.pack()

        # –ï—Ñ–µ–∫—Ç–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è
        def on_enter(e):
            refresh_btn.config(bg='#00AACC', fg='#FFFFFF', highlightbackground='#00FF66')
        def on_leave(e):
            refresh_btn.config(bg='#2D2D2D', fg='#FFFFFF', highlightbackground='#00DDEB')

        refresh_btn.bind("<Enter>", on_enter)
        refresh_btn.bind("<Leave>", on_leave)

    def update_status_indicator(self, score):
        # –ó–º—ñ–Ω—é—î–º–æ –∫–æ–ª—ñ—Ä —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –æ—Ü—ñ–Ω–∫–∏
        color = "#00FF00" if score >= 70 else "#FFFF00" if score >= 40 else "#FF4444"
        self.status_indicator.delete("all")
        self.status_indicator.create_oval(2, 2, 18, 18, fill=color)

    def run_ai_analysis(self):
        self.predictions_text.delete(1.0, tk.END)
        self.predictions_text.insert(tk.END, "üß† –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö...\n")

        try:
            data = get_system_data()

            if not hasattr(self.app_ref, 'ai_engine') or self.app_ref.ai_engine is None:
                raise Exception("AI engine –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")

            result = self.app_ref.ai_engine.predict_system_health(data)

            score = result.get('health_score', 0)
            self.health_label.config(text=f"üß† –Ü–Ω–¥–µ–∫—Å –∑–¥–æ—Ä–æ–≤'—è: {score}%")
            self.update_status_indicator(score)

            self.predictions_text.insert(tk.END, f"\nüß™ –û—Ü—ñ–Ω–∫–∞: {score}%\n", 'bold')

            if result.get('warnings'):
                self.predictions_text.insert(tk.END, "\n‚ö† –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:\n", 'warning')
                for w in result['warnings']:
                    self.predictions_text.insert(tk.END, f" - {w}\n")

            if result.get('predictions'):
                self.predictions_text.insert(tk.END, "\nüîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏:\n", 'prediction')
                for p in result['predictions']:
                    self.predictions_text.insert(tk.END, f" ‚Ä¢ {p}\n")

        except Exception as e:
            self.predictions_text.insert(tk.END, f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}\n", 'error')
    
    def init_ai_engine(self):
        # –¢—É—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ AI engine, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:
        if self.app_ref and hasattr(self.app_ref, 'ai_engine'):
            self.ai_engine = self.app_ref.ai_engine
        else:
            self.ai_engine = None
    
    def set_app_ref(self, app_ref):
        self.app_ref = app_ref
        self.init_ai_engine()

    def run_all_tests(self):
        self.predictions_text.insert(tk.END, "\nüìä –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤...\n")
        try:
            tests = SimpleTests(self.app_ref.data_manager)
            cpu = tests.test_cpu()
            ram = tests.test_ram()
            disk = tests.run_disk_test()

            self.predictions_text.insert(tk.END, f"‚ö° CPU: {cpu:.1f}/100\n")
            self.predictions_text.insert(tk.END, f"üß† RAM: {ram:.1f}/100\n")
            self.predictions_text.insert(tk.END, f"üíæ –î–∏—Å–∫: {disk['disk_score']} (–ß: {disk['read_speed']:.1f} MB/s, –ó: {disk['write_speed']:.1f} MB/s)\n")
            self.predictions_text.insert(tk.END, "‚úì –¢–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n", 'success')
        except Exception as e:
            self.predictions_text.insert(tk.END, f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—ñ–≤: {e}\n", 'error')

    def scan_network(self):
        self.predictions_text.insert(tk.END, "\nüì° –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂—ñ...\n")
        try:
            net_data = get_network_data()
            self.predictions_text.insert(tk.END, f"üîó –ê–∫—Ç–∏–≤–Ω—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è: {net_data.get('active_connections', '-')}\n")
        except Exception as e:
            self.predictions_text.insert(tk.END, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ: {e}\n", 'error')

    def refresh_all(self):
        self.predictions_text.insert(tk.END, "\nüîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è...\n")
        self.run_ai_analysis()
