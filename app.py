# -*- coding: utf-8 -*-
"""
TechCare AI - –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
–ì–æ–ª–æ–≤–Ω–∏–π Streamlit –¥–æ–¥–∞—Ç–æ–∫ –∑ AI —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—é
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import time
import threading
import numpy as np

# –Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—ñ–≤
from monitor import get_system_data
from ai_engine import AIEngine
from data_manager import DataManager
from gamification import GamificationSystem
from benchmarking import BenchmarkingSystem
from auto_repair import AutoRepairSystem
from scheduler import MaintenanceScheduler
from advanced_monitor import AdvancedSystemMonitor
from adaptive_components import AdaptiveLayout, apply_mobile_styles, responsive_dataframe

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Å—ñ–π–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
if 'initialized' not in st.session_state:
    st.session_state.initialized = True
    st.session_state.data_manager = DataManager()
    st.session_state.ai_engine = AIEngine(st.session_state.data_manager)
    st.session_state.gamification = GamificationSystem(st.session_state.data_manager)
    st.session_state.benchmarking = BenchmarkingSystem(st.session_state.data_manager)
    st.session_state.auto_repair = AutoRepairSystem()
    st.session_state.scheduler = MaintenanceScheduler(st.session_state.data_manager)
    st.session_state.advanced_monitor = AdvancedSystemMonitor()
    st.session_state.last_update = 0

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞—Ç–∫–∞"""
    st.set_page_config(
        page_title="TechCare AI",
        page_icon="üñ•Ô∏è",
        layout="wide",
        initial_sidebar_state="auto"
    )
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ñ CSS —Å—Ç–∏–ª—ñ
    st.markdown("""
    <style>
    /* –ê–¥–∞–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ */
    @media (max-width: 768px) {
        .main .block-container {
            padding-top: 1rem;
            padding-bottom: 1rem;
            padding-left: 0.5rem;
            padding-right: 0.5rem;
        }
        
        .stMetric {
            background: linear-gradient(90deg, #f0f2f6 0%, #ffffff 100%);
            padding: 0.5rem;
            border-radius: 0.5rem;
            margin: 0.25rem 0;
            border: 1px solid #e6e9ef;
        }
        
        .sidebar .sidebar-content {
            width: 100% !important;
        }
        
        h1 {
            font-size: 1.5rem !important;
        }
        
        h2 {
            font-size: 1.25rem !important;
        }
        
        h3 {
            font-size: 1.1rem !important;
        }
    }
    
    /* –ê–¥–∞–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥–ª—è –ø–ª–∞–Ω—à–µ—Ç—ñ–≤ */
    @media (min-width: 769px) and (max-width: 1024px) {
        .main .block-container {
            padding-left: 1rem;
            padding-right: 1rem;
        }
        
        .stMetric {
            padding: 0.75rem;
            margin: 0.375rem 0;
        }
    }
    
    /* –°—Ç–∏–ª—ñ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –≤–∏–≥–ª—è–¥—É */
    .stMetric {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin: 0.5rem 0;
        transition: transform 0.2s;
    }
    
    .stMetric:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }
    
    .stMetric > div {
        color: white !important;
    }
    
    .stMetric label {
        color: rgba(255, 255, 255, 0.9) !important;
        font-weight: 600;
    }
    
    .stMetric [data-testid="metric-value"] {
        color: white !important;
        font-size: 1.5rem !important;
        font-weight: 700;
    }
    
    /* –ê–¥–∞–ø—Ç–∏–≤–Ω–∞ —Å—ñ—Ç–∫–∞ */
    .metric-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin: 1rem 0;
    }
    
    /* –°—Ç–∏–ª—ñ –¥–ª—è –∫–∞—Ä—Ç–æ–∫ */
    .info-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        border-left: 4px solid #667eea;
        margin: 1rem 0;
    }
    
    /* –ê–¥–∞–ø—Ç–∏–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏ */
    .stButton > button {
        width: 100%;
        border-radius: 8px;
        border: none;
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        font-weight: 600;
        padding: 0.75rem 1.5rem;
        transition: all 0.3s;
    }
    
    .stButton > button:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
    
    /* –ê–¥–∞–ø—Ç–∏–≤–Ω—ñ —Ç–∞–±–∏ */
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
        flex-wrap: wrap;
    }
    
    .stTabs [data-baseweb="tab"] {
        min-width: auto;
        padding: 0.5rem 1rem;
        white-space: nowrap;
    }
    
    /* –†–µ—Å–ø–æ–Ω—Å–∏–≤–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∏ */
    .js-plotly-plot {
        width: 100% !important;
    }
    
    .plotly {
        width: 100% !important;
    }
    
    /* –ú–æ–±—ñ–ª—å–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è */
    @media (max-width: 768px) {
        .stTabs [data-baseweb="tab-list"] {
            justify-content: center;
            overflow-x: auto;
        }
        
        .stTabs [data-baseweb="tab"] {
            font-size: 0.9rem;
            padding: 0.4rem 0.8rem;
        }
    }
    </style>
    """, unsafe_allow_html=True)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("üñ•Ô∏è TechCare AI")
    st.markdown("**–Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∑–¥–æ—Ä–æ–≤'—è –ü–ö**")
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è
    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –µ–∫—Ä–∞–Ω—É
    screen_size = st.selectbox(
        "üì± –†–æ–∑–º—ñ—Ä –µ–∫—Ä–∞–Ω—É:",
        ["üñ•Ô∏è –î–µ—Å–∫—Ç–æ–ø", "üì± –ú–æ–±—ñ–ª—å–Ω–∏–π", "üì± –ü–ª–∞–Ω—à–µ—Ç"],
        index=0,
        help="–û–±–µ—Ä—ñ—Ç—å –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
    )
    
    mobile_mode = screen_size in ["üì± –ú–æ–±—ñ–ª—å–Ω–∏–π", "üì± –ü–ª–∞–Ω—à–µ—Ç"]
    st.session_state['mobile_mode'] = mobile_mode
    
    if mobile_mode:
        # –ú–æ–±—ñ–ª—å–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±—ñ–≤
        st.markdown("### üéØ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è")
        page = st.radio(
            "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:",
            [
                "üìä –î–∞—à–±–æ—Ä–¥",
                "ü§ñ AI –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", 
                "üîß –ê–≤—Ç–æ-—Ä–µ–º–æ–Ω—Ç",
                "üèÜ –ì–µ–π–º–∏—Ñ—ñ–∫–∞—Ü—ñ—è",
                "üìà –ë–µ–Ω—á–º–∞—Ä–∫—ñ–Ω–≥",
                "üìÖ –†–æ–∑–∫–ª–∞–¥",
                "üìã –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑"
            ],
            horizontal=True if screen_size == "üì± –ü–ª–∞–Ω—à–µ—Ç" else False
        )
    else:
        # –î–µ—Å–∫—Ç–æ–ø–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è
        with st.sidebar:
            st.header("üéØ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è")
            page = st.selectbox(
                "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:",
                [
                    "üìä –î–∞—à–±–æ—Ä–¥",
                    "ü§ñ AI –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", 
                    "üîß –ê–≤—Ç–æ-—Ä–µ–º–æ–Ω—Ç",
                    "üèÜ –ì–µ–π–º–∏—Ñ—ñ–∫–∞—Ü—ñ—è",
                    "üìà –ë–µ–Ω—á–º–∞—Ä–∫—ñ–Ω–≥",
                    "üìÖ –†–æ–∑–∫–ª–∞–¥",
                    "üìã –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑"
                ]
            )
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        auto_refresh = st.checkbox("–ê–≤—Ç–æ-–æ–Ω–æ–≤–ª–µ–Ω–Ω—è (30—Å)", value=False)
        if auto_refresh:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ st.empty() –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
            placeholder = st.empty()
            with placeholder.container():
                st.info("üîÑ –ê–≤—Ç–æ-–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ")
                
        # –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if st.button("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ"):
            st.rerun()
    
    # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    if page == "üìä –î–∞—à–±–æ—Ä–¥":
        show_dashboard()
    elif page == "ü§ñ AI –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞":
        show_ai_analytics()
    elif page == "üîß –ê–≤—Ç–æ-—Ä–µ–º–æ–Ω—Ç":
        show_auto_repair()
    elif page == "üèÜ –ì–µ–π–º–∏—Ñ—ñ–∫–∞—Ü—ñ—è":
        show_gamification()
    elif page == "üìà –ë–µ–Ω—á–º–∞—Ä–∫—ñ–Ω–≥":
        show_benchmarking()
    elif page == "üìÖ –†–æ–∑–∫–ª–∞–¥":
        show_scheduler()
    elif page == "üìã –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑":
        show_detailed_analysis()

def show_dashboard():
    """–ì–æ–ª–æ–≤–Ω–∏–π –¥–∞—à–±–æ—Ä–¥ –∑ —Å–∏—Å—Ç–µ–º–Ω–∏–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏"""
    st.header("üìä –°–∏—Å—Ç–µ–º–Ω–∏–π –¥–∞—à–±–æ—Ä–¥")
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    current_time = time.time()
    if current_time - st.session_state.last_update > 10:  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥
        system_data = get_system_data()
        st.session_state.data_manager.save_system_data(system_data)
        st.session_state.last_update = current_time
        
        # AI –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
        predictions = st.session_state.ai_engine.predict_system_health(system_data)
        st.session_state.predictions = predictions
    else:
        system_data = get_system_data()
        predictions = getattr(st.session_state, 'predictions', {})
    
    # –û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ - –∞–¥–∞–ø—Ç–∏–≤–Ω–∞ —Å—ñ—Ç–∫–∞
    # –ù–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö –±—É–¥–µ 2 –∫–æ–ª–æ–Ω–∫–∏, –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç–∞—Ö - 3, –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø—ñ - 4
    is_mobile = st.session_state.get('is_mobile', False)
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞ —Å—ñ—Ç–∫–∞ –º–µ—Ç—Ä–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∂–∏–º—É –µ–∫—Ä–∞–Ω—É
    mobile_mode = st.session_state.get('mobile_mode', False)
    
    # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –º–æ–±—ñ–ª—å–Ω–∏—Ö —Å—Ç–∏–ª—ñ–≤ –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ
    if mobile_mode:
        apply_mobile_styles()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –º–∞–∫–µ—Ç—É
    adaptive_layout = AdaptiveLayout(mobile_mode)
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –º–µ—Ç—Ä–∏–∫
    metrics_data = [
        {
            'label': 'üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/CPU',
            'value': f"{float(system_data.get('cpu_temp') or system_data.get('cpu_percent') or 0):.1f}{'¬∞C' if system_data.get('cpu_temp') else '%'}",
            'delta': predictions.get('temp_trend', 0)
        },
        {
            'label': 'üíæ RAM',
            'value': f"{float(system_data.get('ram_percent', 0)):.1f}%",
            'delta': predictions.get('ram_trend', 0)
        },
        {
            'label': 'üíø –î–∏—Å–∫',
            'value': f"{float(system_data.get('disk_percent', 0)):.1f}%",
            'delta': predictions.get('disk_trend', 0)
        },
        {
            'label': '‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤\'—è –ü–ö',
            'value': f"{predictions.get('health_score', 85)}/100",
            'delta': predictions.get('health_trend', 0)
        }
    ]
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    adaptive_layout.create_metric_grid(metrics_data)
    
    # AI –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
    if predictions.get('warnings'):
        st.warning("‚ö†Ô∏è AI –≤–∏—è–≤–∏–≤ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏:")
        for warning in predictions['warnings']:
            st.error(f"‚Ä¢ {warning}")
    
    # –ì—Ä–∞—Ñ—ñ–∫–∏ —Ç—Ä–µ–Ω–¥—ñ–≤
    st.subheader("üìà –¢—Ä–µ–Ω–¥–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    historical_data = st.session_state.data_manager.get_historical_data(hours=24)
    
    if not historical_data.empty:
        col1, col2 = st.columns(2)
        
        with col1:
            # –ì—Ä–∞—Ñ—ñ–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏/CPU
            fig_temp = go.Figure()
            fig_temp.add_trace(go.Scatter(
                x=historical_data['timestamp'],
                y=historical_data['cpu_temp'].fillna(historical_data['cpu_percent']),
                mode='lines+markers',
                name='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/CPU',
                line=dict(color='#FF6B6B')
            ))
            fig_temp.update_layout(
                title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/CPU –∑–∞ 24 –≥–æ–¥–∏–Ω–∏",
                xaxis_title="–ß–∞—Å",
                yaxis_title="–ó–Ω–∞—á–µ–Ω–Ω—è",
                height=300
            )
            st.plotly_chart(fig_temp, use_container_width=True)
        
        with col2:
            # –ì—Ä–∞—Ñ—ñ–∫ RAM
            fig_ram = go.Figure()
            fig_ram.add_trace(go.Scatter(
                x=historical_data['timestamp'],
                y=historical_data['ram_percent'],
                mode='lines+markers',
                name='RAM',
                line=dict(color='#4ECDC4')
            ))
            fig_ram.update_layout(
                title="–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è RAM –∑–∞ 24 –≥–æ–¥–∏–Ω–∏",
                xaxis_title="–ß–∞—Å",
                yaxis_title="–í—ñ–¥—Å–æ—Ç–æ–∫ (%)",
                height=300
            )
            st.plotly_chart(fig_ram, use_container_width=True)
    
    # –ß–∞—Å —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏
    uptime_hours = system_data['uptime_seconds'] / 3600
    st.info(f"‚è∞ –ß–∞—Å —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏: {system_data['uptime_str']}")
    
    if uptime_hours > 24:
        st.warning("üí° –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")

def show_ai_analytics():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ AI –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤"""
    st.header("ü§ñ AI –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è")
    
    # –ü–æ—Ç–æ—á–Ω–∏–π AI –∞–Ω–∞–ª—ñ–∑
    system_data = get_system_data()
    ai_analysis = st.session_state.ai_engine.analyze_system_patterns(system_data)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–±–ª–µ–º")
        predictions = st.session_state.ai_engine.predict_failures()
        
        if predictions:
            for prediction in predictions:
                probability = prediction['probability']
                issue_type = prediction['type']
                time_to_failure = prediction['estimated_time']
                
                # –ö–æ–ª—ñ—Ä –Ω–∞ –æ—Å–Ω–æ–≤—ñ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ
                if probability > 0.7:
                    st.error(f"‚ö†Ô∏è **{issue_type}**")
                    st.error(f"–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: {probability:.1%}")
                    st.error(f"–û—á—ñ–∫—É–≤–∞–Ω–∏–π —á–∞—Å: {time_to_failure}")
                elif probability > 0.4:
                    st.warning(f"‚ö° **{issue_type}**")
                    st.warning(f"–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: {probability:.1%}")
                    st.warning(f"–û—á—ñ–∫—É–≤–∞–Ω–∏–π —á–∞—Å: {time_to_failure}")
                else:
                    st.info(f"‚úÖ **{issue_type}**")
                    st.info(f"–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: {probability:.1%}")
        else:
            st.success("‚úÖ AI –Ω–µ –≤–∏—è–≤–∏–≤ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º")
    
    with col2:
        st.subheader("üìä –ê–Ω–∞–ª—ñ–∑ –ø–∞—Ç–µ—Ä–Ω—ñ–≤")
        
        # –ü–æ–∫–∞–∑ –≤–∏—è–≤–ª–µ–Ω–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤
        patterns = ai_analysis.get('patterns', [])
        if patterns:
            for pattern in patterns:
                st.write(f"‚Ä¢ **{pattern['type']}**: {pattern['description']}")
                st.write(f"  –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {pattern['confidence']:.1%}")
        else:
            st.info("–ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ø–∞—Ç–µ—Ä–Ω—ñ–≤...")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó AI
    st.subheader("üí° AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")
    recommendations = st.session_state.ai_engine.get_personalized_recommendations(system_data)
    
    for i, rec in enumerate(recommendations):
        priority_icon = "üî¥" if rec['priority'] == 'high' else "üü°" if rec['priority'] == 'medium' else "üü¢"
        
        with st.expander(f"{priority_icon} {rec['title']}"):
            st.write(rec['description'])
            st.write(f"**–û—á—ñ–∫—É–≤–∞–Ω–∏–π –µ—Ñ–µ–∫—Ç:** {rec['expected_impact']}")
            
            if st.button(f"–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏", key=f"apply_rec_{i}"):
                if rec.get('auto_applicable'):
                    result = st.session_state.auto_repair.apply_recommendation(rec)
                    if result['success']:
                        st.success(f"‚úÖ {result['message']}")
                    else:
                        st.error(f"‚ùå {result['message']}")
                else:
                    st.info("–¶—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –ø–æ—Ç—Ä–µ–±—É—î —Ä—É—á–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")

def show_auto_repair():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç—É"""
    st.header("üîß –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ-—Ä–µ–º–æ–Ω—Ç—É")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üîç –ü–æ—Ç–æ—á–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        
        if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ–≤–Ω—É –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É"):
            with st.spinner("–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞..."):
                time.sleep(2)  # –°–∏–º—É–ª—è—Ü—ñ—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                issues = st.session_state.auto_repair.diagnose_system()
                
                if issues:
                    st.warning(f"–í–∏—è–≤–ª–µ–Ω–æ {len(issues)} –ø—Ä–æ–±–ª–µ–º:")
                    for issue in issues:
                        st.write(f"‚Ä¢ **{issue['type']}**: {issue['description']}")
                        st.write(f"  –ö—Ä–∏—Ç–∏—á–Ω—ñ—Å—Ç—å: {issue['severity']}")
                        
                        if issue.get('auto_fixable'):
                            if st.button(f"üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏", key=f"fix_{issue['id']}"):
                                result = st.session_state.auto_repair.auto_fix_issue(issue)
                                if result['success']:
                                    st.success(f"‚úÖ {result['message']}")
                                else:
                                    st.error(f"‚ùå {result['message']}")
                else:
                    st.success("‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ!")
    
    with col2:
        st.subheader("üìã –Ü—Å—Ç–æ—Ä—ñ—è —Ä–µ–º–æ–Ω—Ç—ñ–≤")
        
        repair_history = st.session_state.auto_repair.get_repair_history()
        
        if repair_history:
            for repair in repair_history[-5:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 5 —Ä–µ–º–æ–Ω—Ç—ñ–≤
                date = repair['timestamp'].strftime("%d.%m.%Y %H:%M")
                status_icon = "‚úÖ" if repair['success'] else "‚ùå"
                
                with st.expander(f"{status_icon} {repair['issue_type']} - {date}"):
                    st.write(f"**–ü—Ä–æ–±–ª–µ–º–∞:** {repair['description']}")
                    st.write(f"**–î—ñ—è:** {repair['action_taken']}")
                    st.write(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** {repair['result']}")
        else:
            st.info("–Ü—Å—Ç–æ—Ä—ñ—è —Ä–µ–º–æ–Ω—Ç—ñ–≤ –ø—É—Å—Ç–∞")
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ-—Ä–µ–º–æ–Ω—Ç—É
    st.subheader("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        auto_fix_enabled = st.checkbox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–µ–º–æ–Ω—Ç", value=True)
        st.session_state.auto_repair.set_auto_fix_enabled(auto_fix_enabled)
    
    with col2:
        fix_severity = st.selectbox(
            "–ê–≤—Ç–æ—Ñ—ñ–∫—Å –¥–ª—è —Ä—ñ–≤–Ω—è:",
            ["–ù–∏–∑—å–∫–∏–π", "–°–µ—Ä–µ–¥–Ω—ñ–π", "–í–∏—Å–æ–∫–∏–π"],
            index=1
        )
    
    with col3:
        notify_repairs = st.checkbox("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–º–æ–Ω—Ç–∏", value=True)

def show_gamification():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –≥–µ–π–º–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
    st.header("üèÜ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å")
    
    # –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –≥—Ä–∞–≤—Ü—è
    user_stats = st.session_state.gamification.get_user_stats()
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="‚≠ê –†—ñ–≤–µ–Ω—å",
            value=user_stats['level'],
            delta=f"+{user_stats['exp_to_next']} –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ"
        )
    
    with col2:
        st.metric(
            label="üéØ –û—á–∫–∏ –¥–æ—Å–≤—ñ–¥—É",
            value=user_stats['total_exp'],
            delta=f"+{user_stats['today_exp']} —Å—å–æ–≥–æ–¥–Ω—ñ"
        )
    
    with col3:
        st.metric(
            label="üèÖ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è",
            value=f"{user_stats['achievements_unlocked']}/{user_stats['total_achievements']}"
        )
    
    with col4:
        st.metric(
            label="üî• Streak",
            value=f"{user_stats['streak']} –¥–Ω—ñ–≤",
            delta="+1" if user_stats['streak_active'] else "0"
        )
    
    # –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä –¥–æ—Å–≤—ñ–¥—É
    exp_progress = user_stats['current_level_exp'] / user_stats['exp_for_next_level']
    st.progress(exp_progress)
    st.caption(f"–ü—Ä–æ–≥—Ä–µ—Å –¥–æ —Ä—ñ–≤–Ω—è {user_stats['level'] + 1}: {user_stats['current_level_exp']}/{user_stats['exp_for_next_level']} XP")
    
    # –í–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4 = st.tabs(["üèÖ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üéÅ –ù–∞–≥–æ—Ä–æ–¥–∏", "üèÜ –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤"])
    
    with tab1:
        achievements = st.session_state.gamification.get_achievements()
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üîì –í—ñ–¥–∫—Ä–∏—Ç—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è")
            unlocked = [a for a in achievements if a['unlocked']]
            
            for achievement in unlocked:
                st.success(f"üèÖ **{achievement['name']}**")
                st.write(achievement['description'])
                st.write(f"–û—Ç—Ä–∏–º–∞–Ω–æ: {achievement['unlocked_date']}")
                st.write(f"–ù–∞–≥–æ—Ä–æ–¥–∞: +{achievement['exp_reward']} XP")
                st.write("---")
        
        with col2:
            st.subheader("üîí –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è")
            locked = [a for a in achievements if not a['unlocked']]
            
            for achievement in locked:
                progress = achievement.get('progress', 0)
                target = achievement.get('target', 100)
                
                st.info(f"üîí **{achievement['name']}**")
                st.write(achievement['description'])
                st.progress(progress / target)
                st.write(f"–ü—Ä–æ–≥—Ä–µ—Å: {progress}/{target}")
                st.write(f"–ù–∞–≥–æ—Ä–æ–¥–∞: +{achievement['exp_reward']} XP")
                st.write("---")
    
    with tab2:
        st.subheader("üìà –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        # –ì—Ä–∞—Ñ—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        activity_data = st.session_state.gamification.get_activity_history()
        
        if not activity_data.empty:
            fig = px.line(
                activity_data, 
                x='date', 
                y='exp_earned',
                title="–î–æ—Å–≤—ñ–¥ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤"
            )
            st.plotly_chart(fig, use_container_width=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        col1, col2 = st.columns(2)
        
        with col1:
            category_stats = st.session_state.gamification.get_category_stats()
            fig_pie = px.pie(
                values=list(category_stats.values()),
                names=list(category_stats.keys()),
                title="–†–æ–∑–ø–æ–¥—ñ–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö"
            )
            st.plotly_chart(fig_pie, use_container_width=True)
        
        with col2:
            st.subheader("üèÉ‚Äç‚ôÇÔ∏è Streak —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            streak_stats = st.session_state.gamification.get_streak_stats()
            
            st.write(f"‚Ä¢ –ü–æ—Ç–æ—á–Ω–∏–π streak: {streak_stats['current']} –¥–Ω—ñ–≤")
            st.write(f"‚Ä¢ –ù–∞–π–¥–æ–≤—à–∏–π streak: {streak_stats['longest']} –¥–Ω—ñ–≤") 
            st.write(f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π streak: {streak_stats['average']:.1f} –¥–Ω—ñ–≤")
            st.write(f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å streaks: {streak_stats['total_streaks']}")
    
    with tab3:
        st.subheader("üéÅ –ù–∞–≥–æ—Ä–æ–¥–∏ —Ç–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏")
        
        available_rewards = st.session_state.gamification.get_available_rewards()
        
        for reward in available_rewards:
            cost = reward['cost']
            user_points = user_stats.get('reward_points', 0)
            
            col1, col2, col3 = st.columns([3, 1, 1])
            
            with col1:
                st.write(f"**{reward['name']}**")
                st.write(reward['description'])
            
            with col2:
                st.write(f"üí∞ {cost} –±–∞–ª—ñ–≤")
            
            with col3:
                if user_points >= cost:
                    if st.button("üõí –ö—É–ø–∏—Ç–∏", key=f"buy_{reward['id']}"):
                        result = st.session_state.gamification.redeem_reward(reward['id'])
                        if result['success']:
                            st.success("‚úÖ –ù–∞–≥–æ—Ä–æ–¥—É –æ—Ç—Ä–∏–º–∞–Ω–æ!")
                            st.rerun()
                        else:
                            st.error(f"‚ùå {result['message']}")
                else:
                    st.button("üîí –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª—ñ–≤", disabled=True, key=f"disabled_{reward['id']}")
    
    with tab4:
        st.subheader("üèÜ –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤")
        
        leaderboard = st.session_state.gamification.get_leaderboard()
        
        # –§–µ–π–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É —Ü–µ –±—É–ª–∏ –± –¥–∞–Ω—ñ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)
        demo_leaderboard = [
            {"rank": 1, "username": "–í–∏", "level": user_stats['level'], "exp": user_stats['total_exp'], "achievements": user_stats['achievements_unlocked']},
            {"rank": 2, "username": "TechMaster", "level": 15, "exp": 45000, "achievements": 23},
            {"rank": 3, "username": "PCExpert", "level": 12, "exp": 38000, "achievements": 20},
            {"rank": 4, "username": "SystemGuru", "level": 11, "exp": 35000, "achievements": 18},
            {"rank": 5, "username": "ComputerPro", "level": 10, "exp": 32000, "achievements": 16}
        ]
        
        for player in demo_leaderboard:
            if player['username'] == "–í–∏":
                st.success(f"üèÜ #{player['rank']} **{player['username']}** - –†—ñ–≤–µ–Ω—å {player['level']} ({player['exp']} XP, {player['achievements']} –¥–æ—Å—è–≥–Ω–µ–Ω—å)")
            else:
                st.write(f"#{player['rank']} {player['username']} - –†—ñ–≤–µ–Ω—å {player['level']} ({player['exp']} XP, {player['achievements']} –¥–æ—Å—è–≥–Ω–µ–Ω—å)")

def show_benchmarking():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫—ñ–Ω–≥–∞"""
    st.header("üìà –ë–µ–Ω—á–º–∞—Ä–∫—ñ–Ω–≥ —Ç–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è")
    
    # –ü–æ—Ç–æ—á–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    current_results = st.session_state.benchmarking.get_current_benchmark()
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            label="‚ö° –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞",
            value=f"{current_results['overall_score']}/100",
            delta=f"{current_results['score_change']:+.1f}"
        )
    
    with col2:
        st.metric(
            label="üéØ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥",
            value=f"#{current_results['rank']}",
            delta=f"{current_results['rank_change']:+d}"
        )
    
    with col3:
        st.metric(
            label="üìä –ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å",
            value=f"{current_results['percentile']:.0f}%",
            delta=f"{current_results['percentile_change']:+.1f}%"
        )
    
    # –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±–µ–Ω—á–º–∞—Ä–∫—É")
    
    benchmark_data = st.session_state.benchmarking.get_detailed_results()
    
    # –†–∞–¥–∞—Ä–Ω–∞ –¥—ñ–∞–≥—Ä–∞–º–∞
    categories = ['CPU', 'RAM', '–î–∏—Å–∫', '–ú–µ—Ä–µ–∂–∞', '–°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å', '–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å']
    category_mapping = {
        'CPU': 'cpu',
        'RAM': 'ram', 
        '–î–∏—Å–∫': 'disk',
        '–ú–µ—Ä–µ–∂–∞': 'network',
        '–°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å': 'stability',
        '–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å': 'efficiency'
    }
    
    your_scores = []
    avg_scores = []
    
    for cat in categories:
        key = category_mapping[cat]
        if key in benchmark_data:
            your_scores.append(benchmark_data[key]['your_score'])
            avg_scores.append(benchmark_data[key]['average_score'])
        else:
            your_scores.append(50)  # –†–µ–∑–µ—Ä–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
            avg_scores.append(50)
    
    fig = go.Figure()
    
    fig.add_trace(go.Scatterpolar(
        r=your_scores,
        theta=categories,
        fill='toself',
        name='–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
        line_color='#00DDEB'
    ))
    
    fig.add_trace(go.Scatterpolar(
        r=avg_scores,
        theta=categories,
        fill='toself',
        name='–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
        line_color='#FF6B6B',
        opacity=0.6
    ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 100]
            )),
        showlegend=True,
        title="–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ —ñ–Ω—à–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏"
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –¢–∞–±–ª–∏—Ü—è –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üí™ –í–∞—à—ñ —Å–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏")
        strengths = st.session_state.benchmarking.get_strengths()
        for strength in strengths:
            st.success(f"‚úÖ **{strength['category']}**: {strength['description']}")
    
    with col2:
        st.subheader("üîß –û–±–ª–∞—Å—Ç—ñ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è")
        improvements = st.session_state.benchmarking.get_improvement_areas()
        for improvement in improvements:
            st.warning(f"‚ö° **{improvement['category']}**: {improvement['suggestion']}")
    
    # –Ü—Å—Ç–æ—Ä—ñ—è –±–µ–Ω—á–º–∞—Ä–∫—ñ–≤
    st.subheader("üìà –Ü—Å—Ç–æ—Ä—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
    
    history_data = st.session_state.benchmarking.get_history()
    
    if not history_data.empty:
        fig_history = px.line(
            history_data,
            x='timestamp',
            y='overall_score',
            title="–ó–º—ñ–Ω–∞ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥—É –≤ —á–∞—Å—ñ"
        )
        st.plotly_chart(fig_history, use_container_width=True)
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫—É –Ω–æ–≤–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫—É
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤–∏–π –±–µ–Ω—á–º–∞—Ä–∫"):
        with st.spinner("–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –±–µ–Ω—á–º–∞—Ä–∫..."):
            progress_bar = st.progress(0)
            for i in range(100):
                time.sleep(0.05)
                progress_bar.progress(i + 1)
            
            new_results = st.session_state.benchmarking.run_benchmark()
            st.success("‚úÖ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            st.info(f"–í–∞—à –Ω–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {new_results['overall_score']}/100")
            st.rerun()

def show_scheduler():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è"""
    st.header("üìÖ –†–æ–∑–∫–ª–∞–¥ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è")
    
    # –ü–æ—Ç–æ—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
    st.subheader("üìã –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è")
    
    today_tasks = st.session_state.scheduler.get_today_tasks()
    
    if today_tasks:
        for task in today_tasks:
            col1, col2, col3 = st.columns([3, 2, 1])
            
            with col1:
                status_icon = "‚úÖ" if task['completed'] else "‚è≥"
                priority_icon = "üî¥" if task['priority'] == 'high' else "üü°" if task['priority'] == 'medium' else "üü¢"
                st.write(f"{status_icon} {priority_icon} **{task['title']}**")
                st.write(task['description'])
            
            with col2:
                st.write(f"‚è∞ {task['scheduled_time']}")
                st.write(f"üìä {task['category']}")
            
            with col3:
                if not task['completed']:
                    if st.button("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", key=f"complete_{task['id']}"):
                        st.session_state.scheduler.mark_task_completed(task['id'])
                        st.rerun()
                
                if st.button("‚è∏Ô∏è –í—ñ–¥–∫–ª–∞—Å—Ç–∏", key=f"postpone_{task['id']}"):
                    st.session_state.scheduler.postpone_task(task['id'], hours=24)
                    st.rerun()
    else:
        st.success("üéâ –í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏–∫–æ–Ω–∞–Ω—ñ!")
    
    # –ö–∞–ª–µ–Ω–¥–∞—Ä –∑–∞–≤–¥–∞–Ω—å
    st.subheader("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å")
    
    weekly_schedule = st.session_state.scheduler.get_weekly_schedule()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
    days = ['–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä', '–ü\'—è—Ç–Ω–∏—Ü—è', '–°—É–±–æ—Ç–∞', '–ù–µ–¥—ñ–ª—è']
    
    for day in days:
        with st.expander(f"üìÖ {day}"):
            day_tasks = weekly_schedule.get(day, [])
            
            if day_tasks:
                for task in day_tasks:
                    priority_icon = "üî¥" if task['priority'] == 'high' else "üü°" if task['priority'] == 'medium' else "üü¢"
                    st.write(f"{priority_icon} **{task['time']}** - {task['title']}")
                    st.write(f"   {task['description']}")
            else:
                st.write("üì¥ –ó–∞–≤–¥–∞–Ω—å –Ω–µ–º–∞—î")
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É
    st.subheader("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:**")
        
        auto_cleanup = st.checkbox("–©–æ–¥–µ–Ω–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è", value=True)
        auto_defrag = st.checkbox("–¢–∏–∂–Ω–µ–≤–∞ –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü—ñ—è", value=True)
        auto_updates = st.checkbox("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å", value=True)
        auto_backup = st.checkbox("–†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è", value=False)
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        settings = {
            'auto_cleanup': auto_cleanup,
            'auto_defrag': auto_defrag,
            'auto_updates': auto_updates,
            'auto_backup': auto_backup
        }
        st.session_state.scheduler.update_settings(settings)
    
    with col2:
        st.write("**–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:**")
        
        cleanup_time = st.time_input("–ß–∞—Å –æ—á–∏—â–µ–Ω–Ω—è", value=datetime.strptime("02:00", "%H:%M").time())
        defrag_day = st.selectbox("–î–µ–Ω—å –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü—ñ—ó", days, index=6)
        update_frequency = st.selectbox("–ß–∞—Å—Ç–æ—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω—å", ["–©–æ–¥–Ω—è", "–©–æ—Ç–∏–∂–Ω—è", "–©–æ–º—ñ—Å—è—Ü—è"], index=1)
        
        if st.button("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"):
            time_settings = {
                'cleanup_time': cleanup_time.strftime("%H:%M"),
                'defrag_day': defrag_day,
                'update_frequency': update_frequency
            }
            st.session_state.scheduler.update_time_settings(time_settings)
            st.success("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
    st.subheader("‚ûï –î–æ–¥–∞—Ç–∏ –≤–ª–∞—Å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è")
    
    with st.form("add_task"):
        task_title = st.text_input("–ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è")
        task_description = st.text_area("–û–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è")
        task_date = st.date_input("–î–∞—Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")
        task_time = st.time_input("–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")
        task_priority = st.selectbox("–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç", ["–ù–∏–∑—å–∫–∏–π", "–°–µ—Ä–µ–¥–Ω—ñ–π", "–í–∏—Å–æ–∫–∏–π"])
        task_category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", ["–û—á–∏—â–µ–Ω–Ω—è", "–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è", "–†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è", "–û–Ω–æ–≤–ª–µ–Ω–Ω—è", "–Ü–Ω—à–µ"])
        
        if st.form_submit_button("‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è"):
            task_data = {
                'title': task_title,
                'description': task_description,
                'date': task_date,
                'time': task_time,
                'priority': task_priority.lower(),
                'category': task_category
            }
            
            result = st.session_state.scheduler.add_custom_task(task_data)
            
            if result['success']:
                st.success("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ —Ä–æ–∑–∫–ª–∞–¥—É!")
                st.rerun()
            else:
                st.error(f"‚ùå {result['message']}")

def show_detailed_analysis():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É"""
    st.header("üìã –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–∏—Å—Ç–µ–º–∏")
    
    # –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
    advanced_data = st.session_state.advanced_monitor.get_comprehensive_analysis()
    
    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –≤–∏–¥—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É
    tab1, tab2, tab3, tab4 = st.tabs(["üîß –ê–ø–∞—Ä–∞—Ç–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è", "üíø –î–∏—Å–∫–∏ —Ç–∞ —Ñ–∞–π–ª–∏", "üåê –ú–µ—Ä–µ–∂–∞", "üîí –ë–µ–∑–ø–µ–∫–∞"])
    
    with tab1:
        st.subheader("‚öôÔ∏è –ê–Ω–∞–ª—ñ–∑ –∞–ø–∞—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è")
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ—Ü–µ—Å–æ—Ä
        cpu_info = advanced_data.get('cpu_analysis', {})
        st.write("**üñ•Ô∏è –ü—Ä–æ—Ü–µ—Å–æ—Ä:**")
        st.write(f"‚Ä¢ –ú–æ–¥–µ–ª—å: {cpu_info.get('model', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
        st.write(f"‚Ä¢ –Ø–¥—Ä–∞: {cpu_info.get('cores', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
        st.write(f"‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: {cpu_info.get('frequency', '–ù–µ–≤—ñ–¥–æ–º–æ')} MHz")
        st.write(f"‚Ä¢ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {cpu_info.get('usage', 0):.1f}%")
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
        thermal_analysis = advanced_data.get('thermal_analysis', {})
        st.write("**üå°Ô∏è –¢–µ—Ä–º–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑:**")
        st.write(f"‚Ä¢ –ü–æ—Ç–æ—á–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {thermal_analysis.get('current_temp', '–ù/–î')}")
        st.write(f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∑–∞ –¥–æ–±—É: {thermal_analysis.get('max_temp_24h', '–ù/–î')}")
        st.write(f"‚Ä¢ –°—Ç–∞–Ω —Ç–µ—Ä–º–æ–ø–∞—Å—Ç–∏: {thermal_analysis.get('paste_condition', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
        
        # –í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∏
        fan_analysis = advanced_data.get('fan_analysis', {})
        st.write("**üå™Ô∏è –°–∏—Å—Ç–µ–º–∞ –æ—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è:**")
        for fan in fan_analysis.get('fans', []):
            st.write(f"‚Ä¢ {fan['name']}: {fan['speed']} RPM ({fan['status']})")
    
    with tab2:
        st.subheader("üíø –ê–Ω–∞–ª—ñ–∑ –¥–∏—Å–∫—ñ–≤ —Ç–∞ —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏")
        
        disk_analysis = advanced_data.get('disk_analysis', {})
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–∏—Å–∫–∏
        for disk in disk_analysis.get('disks', []):
            st.write(f"**üìÄ –î–∏—Å–∫ {disk['device']}:**")
            st.write(f"‚Ä¢ –¢–∏–ø: {disk['type']}")
            st.write(f"‚Ä¢ –†–æ–∑–º—ñ—Ä: {disk['total_size']}")
            st.write(f"‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {disk['used_space']} ({disk['usage_percent']:.1f}%)")
            st.write(f"‚Ä¢ –§–∞–π–ª–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞: {disk['filesystem']}")
            st.write(f"‚Ä¢ –ó–¥–æ—Ä–æ–≤'—è: {disk['health_status']}")
            
            # –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
            st.progress(disk['usage_percent'] / 100)
            st.write("---")
        
        # –ê–Ω–∞–ª—ñ–∑ –≤–µ–ª–∏–∫–∏—Ö —Ñ–∞–π–ª—ñ–≤
        large_files = disk_analysis.get('large_files', [])
        if large_files:
            st.write("**üìÅ –ù–∞–π–±—ñ–ª—å—à—ñ —Ñ–∞–π–ª–∏:**")
            for file_info in large_files[:10]:
                st.write(f"‚Ä¢ {file_info['path']} - {file_info['size']}")
        
        # –ê–Ω–∞–ª—ñ–∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü—ñ—ó
        fragmentation = disk_analysis.get('fragmentation', {})
        st.write(f"**üìä –§—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü—ñ—è:** {fragmentation.get('level', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
        
        if fragmentation.get('recommendation'):
            st.info(f"üí° {fragmentation['recommendation']}")
    
    with tab3:
        st.subheader("üåê –ú–µ—Ä–µ–∂–µ–≤–∏–π –∞–Ω–∞–ª—ñ–∑")
        
        network_analysis = advanced_data.get('network_analysis', {})
        
        # –®–≤–∏–¥–∫—ñ—Å—Ç—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        speed_test = network_analysis.get('speed_test', {})
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("‚¨áÔ∏è –®–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", f"{speed_test.get('download', 0):.1f} Mbps")
        
        with col2:
            st.metric("‚¨ÜÔ∏è –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", f"{speed_test.get('upload', 0):.1f} Mbps")
        
        with col3:
            st.metric("üì° –ü—ñ–Ω–≥", f"{speed_test.get('ping', 0):.0f} ms")
        
        # –ê–∫—Ç–∏–≤–Ω—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è
        connections = network_analysis.get('connections', [])
        st.write(f"**üîó –ê–∫—Ç–∏–≤–Ω—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è:** {len(connections)}")
        
        if connections:
            connection_df = pd.DataFrame(connections)
            st.dataframe(connection_df, use_container_width=True)
        
        # DNS –∞–Ω–∞–ª—ñ–∑
        dns_analysis = network_analysis.get('dns_analysis', {})
        st.write("**üîç DNS –∞–Ω–∞–ª—ñ–∑:**")
        st.write(f"‚Ä¢ –ß–∞—Å –≤—ñ–¥–≥—É–∫—É: {dns_analysis.get('response_time', '–ù/–î')} ms")
        st.write(f"‚Ä¢ –°–µ—Ä–≤–µ—Ä: {dns_analysis.get('server', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
    
    with tab4:
        st.subheader("üîí –ê–Ω–∞–ª—ñ–∑ –±–µ–∑–ø–µ–∫–∏")
        
        security_analysis = advanced_data.get('security_analysis', {})
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –±–µ–∑–ø–µ–∫–∏
        security_score = security_analysis.get('security_score', 0)
        st.metric("üõ°Ô∏è –†—ñ–≤–µ–Ω—å –±–µ–∑–ø–µ–∫–∏", f"{security_score}/100")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–∑–ø–µ–∫–∏
        security_checks = security_analysis.get('checks', {})
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**‚úÖ –ü—Ä–æ–π–¥–µ–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:**")
            for check, status in security_checks.items():
                if status:
                    st.success(f"‚Ä¢ {check}")
        
        with col2:
            st.write("**‚ùå –ù–µ–≤–¥–∞–ª—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:**")
            for check, status in security_checks.items():
                if not status:
                    st.error(f"‚Ä¢ {check}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑ –±–µ–∑–ø–µ–∫–∏
        security_recommendations = security_analysis.get('recommendations', [])
        if security_recommendations:
            st.write("**üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑ –±–µ–∑–ø–µ–∫–∏:**")
            for rec in security_recommendations:
                st.warning(f"‚Ä¢ {rec}")
        
        # –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó –±–µ–∑–ø–µ–∫–∏
        security_events = security_analysis.get('recent_events', [])
        if security_events:
            st.write("**üìã –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó –±–µ–∑–ø–µ–∫–∏:**")
            for event in security_events[-5:]:
                event_time = event['timestamp'].strftime("%d.%m.%Y %H:%M")
                st.write(f"‚Ä¢ {event_time}: {event['description']}")

if __name__ == "__main__":
    main()
