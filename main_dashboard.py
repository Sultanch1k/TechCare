# -*- coding: utf-8 -*-
"""
SystemWatch Pro - –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ü–ö
–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–¥–æ—Ä–æ–≤'—è–º –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏—Ö —Å–∏—Å—Ç–µ–º
–†–æ–∑—Ä–æ–±–ª–µ–Ω–æ: [–í–∞—à–µ —ñ–º'—è]
–í–µ—Ä—Å—ñ—è: 2.1.0
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import time
import threading
import numpy as np

# –Ü–º–ø–æ—Ä—Ç –≤–ª–∞—Å–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
from system_analyzer import collect_hardware_metrics
from intelligence_core import PredictiveEngine
from storage_handler import DatabaseController
from achievement_system import UserMotivation
from performance_tester import SystemBenchmark
from maintenance_scheduler import TaskAutomation
from diagnostic_tools import AutoFixUtility
from responsive_ui import ResponsiveInterface, mobile_optimizations, adaptive_tables

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –ø—Ä–æ–≥—Ä–∞–º–∏
if 'app_initialized' not in st.session_state:
    st.session_state.app_initialized = True
    st.session_state.user_preferences = {}
    st.session_state.notification_queue = []
    st.session_state.performance_history = []

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏
@st.cache_resource
def initialize_core_components():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏"""
    database_ctrl = DatabaseController()
    predict_engine = PredictiveEngine(database_ctrl)
    motivator = UserMotivation(database_ctrl)
    benchmark_tool = SystemBenchmark(database_ctrl)
    repair_utility = AutoFixUtility()
    task_manager = TaskAutomation(database_ctrl)
    
    return {
        'db_controller': database_ctrl,
        'predictor': predict_engine,
        'motivator': motivator,
        'benchmark': benchmark_tool,
        'repair_tool': repair_utility,
        'scheduler': task_manager
    }

def launch_main_interface():
    """–ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –ø—Ä–æ–≥—Ä–∞–º–∏"""
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±-—Å—Ç–æ—Ä—ñ–Ω–∫–∏
    st.set_page_config(
        page_title="SystemWatch Pro",
        page_icon="üõ°Ô∏è",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
    components = initialize_core_components()
    
    # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤–ª–∞—Å–Ω–∏—Ö —Å—Ç–∏–ª—ñ–≤
    apply_custom_styling()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏
    create_header_section()
    
    # –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    with st.sidebar:
        st.image("https://via.placeholder.com/200x80/4a90e2/ffffff?text=SystemWatch", width=200)
        st.markdown("### üõ°Ô∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è")
        
        # –í–∏–±—ñ—Ä –∞–∫—Ç–∏–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        current_page = st.radio(
            "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:",
            [
                "üè† –ì–æ–ª–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å", 
                "üß† –†–æ–∑—É–º–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞", 
                "‚öôÔ∏è –ê–≤—Ç–æ–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
                "üéØ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å",
                "üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ",
                "‚è∞ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–≤–¥–∞–Ω—å",
                "üìä –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –æ–≥–ª—è–¥"
            ]
        )
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        refresh_enabled = st.checkbox("–ê–≤—Ç–æ-–æ–Ω–æ–≤–ª–µ–Ω–Ω—è (30—Å)", value=False)
        if refresh_enabled:
            st.info("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–µ")
                
        # –†—É—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if st.button("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∑–∞—Ä–∞–∑"):
            st.rerun()
    
    # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö —Ä–æ–∑–¥—ñ–ª—ñ–≤
    if current_page == "üè† –ì–æ–ª–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å":
        display_main_dashboard(components)
    elif current_page == "üß† –†–æ–∑—É–º–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞":
        display_intelligence_panel(components)
    elif current_page == "‚öôÔ∏è –ê–≤—Ç–æ–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞":
        display_repair_center(components)
    elif current_page == "üéØ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å":
        display_achievement_hub(components)
    elif current_page == "üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ":
        display_benchmark_suite(components)
    elif current_page == "‚è∞ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–≤–¥–∞–Ω—å":
        display_task_scheduler(components)
    elif current_page == "üìä –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –æ–≥–ª—è–¥":
        display_detailed_analytics(components)

def apply_custom_styling():
    """–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å—Ç–∏–ª—ñ–≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
    st.markdown("""
    <style>
    /* –û—Å–Ω–æ–≤–Ω–∞ —Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–∞–º–∏ */
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }
    
    /* –ö–∞—Ä—Ç–∫–∏ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ */
    .metric-container {
        background: linear-gradient(145deg, #f0f2f6, #ffffff);
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        border-left: 4px solid #667eea;
        transition: transform 0.3s ease;
    }
    
    .metric-container:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
    }
    
    /* –°—Ç–∞—Ç—É—Å–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ */
    .status-excellent { color: #4CAF50; font-weight: bold; }
    .status-good { color: #8BC34A; font-weight: bold; }
    .status-warning { color: #FF9800; font-weight: bold; }
    .status-critical { color: #F44336; font-weight: bold; }
    
    /* –ê–¥–∞–ø—Ç–∏–≤–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ */
    @media (max-width: 768px) {
        .main-header { padding: 1rem; font-size: 0.9rem; }
        .metric-container { padding: 1rem; margin: 0.5rem 0; }
    }
    
    /* –ê–Ω—ñ–º–∞—Ü—ñ—ó */
    @keyframes pulse-glow {
        0% { box-shadow: 0 0 0 0 rgba(102, 126, 234, 0.7); }
        70% { box-shadow: 0 0 0 10px rgba(102, 126, 234, 0); }
        100% { box-shadow: 0 0 0 0 rgba(102, 126, 234, 0); }
    }
    
    .pulse-animation {
        animation: pulse-glow 2s infinite;
    }
    </style>
    """, unsafe_allow_html=True)

def create_header_section():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–∏"""
    st.markdown("""
    <div class="main-header">
        <h1>üõ°Ô∏è SystemWatch Pro</h1>
        <p>–Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏—Ö —Å–∏—Å—Ç–µ–º</p>
        <small>–†–æ–∑—Ä–æ–±–ª–µ–Ω–æ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –ø–µ—Ä–µ–¥–æ–≤–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É</small>
    </div>
    """, unsafe_allow_html=True)

def display_main_dashboard(components):
    """–ì–æ–ª–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å –∑ —Å–∏—Å—Ç–µ–º–Ω–∏–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏"""
    st.subheader("üè† –°–∏—Å—Ç–µ–º–Ω–∏–π –æ–≥–ª—è–¥")
    
    # –ó–±—ñ—Ä –ø–æ—Ç–æ—á–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º–∏
    current_metrics = collect_hardware_metrics()
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ –≤—ñ–¥ –®–Ü
    intelligence_data = components['predictor'].analyze_system_state(current_metrics)
    
    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    mobile_view = st.session_state.get('mobile_interface', False)
    
    # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ–π
    if mobile_view:
        mobile_optimizations()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    responsive_ui = ResponsiveInterface(mobile_view)
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –º–µ—Ç—Ä–∏–∫
    system_indicators = [
        {
            'label': 'üå°Ô∏è –¢–µ—Ä–º–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω',
            'value': f"{float(current_metrics.get('thermal_reading') or current_metrics.get('cpu_usage') or 0):.1f}{'¬∞C' if current_metrics.get('thermal_reading') else '%'}",
            'trend': intelligence_data.get('thermal_forecast', 0)
        },
        {
            'label': 'üíæ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º\'—è—Ç—ñ',
            'value': f"{float(current_metrics.get('memory_usage', 0)):.1f}%",
            'trend': intelligence_data.get('memory_forecast', 0)
        },
        {
            'label': 'üíø –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–∏—Å–∫–∞',
            'value': f"{float(current_metrics.get('storage_usage', 0)):.1f}%",
            'trend': intelligence_data.get('storage_forecast', 0)
        },
        {
            'label': '‚ö° –Ü–Ω–¥–µ–∫—Å –∑–¥–æ—Ä–æ–≤\'—è',
            'value': f"{intelligence_data.get('health_index', 85)}/100",
            'trend': intelligence_data.get('health_forecast', 0)
        }
    ]
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    responsive_ui.render_metric_dashboard(system_indicators)
    
    # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ —Å–∏—Å—Ç–µ–º–∏ –®–Ü
    if intelligence_data.get('alert_messages'):
        st.warning("‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏:")
        for alert in intelligence_data.get('alert_messages', []):
            st.write(f"‚Ä¢ {alert}")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    create_performance_visualizations(current_metrics, intelligence_data)
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ –±–∞–∑—É
    components['db_controller'].record_system_snapshot(current_metrics)
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –¥–æ—Å—è–≥–Ω–µ–Ω—å
    components['motivator'].track_user_activity("system_check", 10, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏")

def display_intelligence_panel(components):
    """–ü–∞–Ω–µ–ª—å —Ä–æ–∑—É–º–Ω–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏"""
    st.subheader("üß† –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑")
    
    current_data = collect_hardware_metrics()
    predictions = components['predictor'].generate_forecasts()
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üìà –ü—Ä–æ–≥–Ω–æ–∑–∏ —Å–∏—Å—Ç–µ–º–∏")
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –∑–±–æ—ó–≤
        failure_probability = predictions.get('failure_risk', 15)
        st.metric(
            "–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∑–±–æ—é (7 –¥–Ω—ñ–≤)",
            f"{failure_probability}%",
            delta=f"{predictions.get('risk_trend', -2)}%" if predictions.get('risk_trend') else None
        )
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≤—ñ–¥ –®–Ü
        recommendations = components['predictor'].get_optimization_suggestions(current_data)
        
        if recommendations:
            st.markdown("### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
            for idx, suggestion in enumerate(recommendations[:3], 1):
                st.info(f"**{idx}.** {suggestion}")
    
    with col2:
        st.markdown("### üéØ –®–≤–∏–¥–∫—ñ –¥—ñ—ó")
        
        if st.button("üîç –ì–ª–∏–±–æ–∫–∏–π –∞–Ω–∞–ª—ñ–∑"):
            with st.spinner("–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É..."):
                time.sleep(2)
                st.success("–ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω—ñ.")
        
        if st.button("ü§ñ –ù–∞–≤—á–∞–Ω–Ω—è –®–Ü"):
            with st.spinner("–û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π..."):
                components['predictor'].retrain_models()
                st.success("–ú–æ–¥–µ–ª—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ!")

def display_repair_center(components):
    """–¶–µ–Ω—Ç—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    st.subheader("‚öôÔ∏è –¶–µ–Ω—Ç—Ä –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–∞ —Ä–µ–º–æ–Ω—Ç—É")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    diagnostic_results = components['repair_tool'].perform_system_diagnosis()
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        
        for issue in diagnostic_results:
            severity_color = {
                'critical': 'üî¥',
                'warning': 'üü°', 
                'info': 'üü¢'
            }.get(issue['severity'], '‚ö™')
            
            st.markdown(f"{severity_color} **{issue['category']}**: {issue['description']}")
            
            if issue['auto_fixable']:
                if st.button(f"–í–∏–ø—Ä–∞–≤–∏—Ç–∏ {issue['category']}", key=f"fix_{issue['id']}"):
                    success = components['repair_tool'].apply_fix(issue)
                    if success:
                        st.success(f"‚úÖ –ü—Ä–æ–±–ª–µ–º—É '{issue['category']}' —É—Å—É–Ω–µ–Ω–æ!")
                        components['motivator'].track_user_activity("problem_fixed", 50, f"–í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: {issue['category']}")
    
    with col2:
        st.markdown("### ‚ö° –®–≤–∏–¥–∫—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è")
        
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏"):
            cleanup_result = components['repair_tool'].cleanup_temporary_files()
            st.success(f"–ó–≤—ñ–ª—å–Ω–µ–Ω–æ {cleanup_result['freed_space']} –ú–ë –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—Ä—É")
        
        if st.button("üîÑ –û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –º–µ—Ä–µ–∂—É"):
            components['repair_tool'].optimize_network_settings()
            st.success("–ú–µ—Ä–µ–∂–µ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ")
        
        if st.button("üöÄ –ü—Ä–∏—Å–∫–æ—Ä–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É"):
            components['repair_tool'].boost_system_performance()
            st.success("–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏ –ø–æ–∫—Ä–∞—â–µ–Ω–æ")

def display_achievement_hub(components):
    """–•–∞–± —Å–∏—Å—Ç–µ–º–∏ –¥–æ—Å—è–≥–Ω–µ–Ω—å"""
    st.subheader("üéØ –¶–µ–Ω—Ç—Ä –¥–æ—Å—è–≥–Ω–µ–Ω—å")
    
    user_progress = components['motivator'].get_user_statistics()
    
    # –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å", user_progress.get('level', 1))
    
    with col2:
        st.metric("–ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Å–≤—ñ–¥", user_progress.get('total_experience', 0))
    
    with col3:
        next_level_exp = (user_progress.get('level', 1) * 200)
        progress = min(user_progress.get('total_experience', 0) / next_level_exp, 1.0)
        st.metric("–î–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è", f"{int(progress * 100)}%")
    
    # –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
    st.progress(progress)
    
    # –î–æ—Å—Ç—É–ø–Ω—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
    achievements = components['motivator'].get_available_achievements()
    
    st.markdown("### üèÜ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è")
    
    tabs = st.tabs(["üîì –í—ñ–¥–∫—Ä–∏—Ç—ñ", "üîí –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ"])
    
    with tabs[0]:
        unlocked = [a for a in achievements if a['unlocked']]
        for achievement in unlocked:
            st.success(f"üèÜ **{achievement['title']}** - {achievement['description']}")
    
    with tabs[1]:
        locked = [a for a in achievements if not a['unlocked']]
        for achievement in locked:
            st.info(f"üîí **{achievement['title']}** - {achievement['description']}")

def display_benchmark_suite(components):
    """–ù–∞–±—ñ—Ä —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    st.subheader("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤
    if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è", type="primary"):
        with st.spinner("–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ..."):
            benchmark_results = components['benchmark'].execute_full_benchmark()
            
            # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("–ü—Ä–æ—Ü–µ—Å–æ—Ä", f"{benchmark_results['cpu_score']}/100")
            
            with col2:
                st.metric("–ü–∞–º'—è—Ç—å", f"{benchmark_results['memory_score']}/100")
            
            with col3:
                st.metric("–î–∏—Å–∫", f"{benchmark_results['disk_score']}/100")
            
            with col4:
                st.metric("–ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª", f"{benchmark_results['overall_score']}/100")
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            components['db_controller'].save_benchmark_results(benchmark_results)
            
            # –ù–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            components['motivator'].track_user_activity("benchmark_completed", 30, "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ –±–µ–Ω—á–º–∞—Ä–∫")
    
    # –Ü—Å—Ç–æ—Ä—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω—å
    test_history = components['db_controller'].get_benchmark_timeline()
    
    if not test_history.empty:
        st.markdown("### üìà –Ü—Å—Ç–æ—Ä—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω—å")
        
        # –ì—Ä–∞—Ñ—ñ–∫ –∑–º—ñ–Ω –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        performance_chart = px.line(
            test_history, 
            x='timestamp', 
            y='overall_score',
            title='–ó–º—ñ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —É —á–∞—Å—ñ'
        )
        st.plotly_chart(performance_chart, use_container_width=True)

def create_performance_visualizations(metrics, intelligence):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    
    col1, col2 = st.columns(2)
    
    with col1:
        # –ö—Ä—É–≥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
        resource_data = [
            metrics.get('cpu_usage', 0),
            metrics.get('memory_usage', 0),
            metrics.get('storage_usage', 0)
        ]
        
        resource_chart = go.Figure(data=[go.Pie(
            labels=['–ü—Ä–æ—Ü–µ—Å–æ—Ä', '–ü–∞–º\'—è—Ç—å', '–î–∏—Å–∫'],
            values=resource_data,
            hole=0.4,
            marker_colors=['#FF6B6B', '#4ECDC4', '#45B7D1']
        )])
        
        resource_chart.update_layout(
            title="–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤",
            showlegend=True,
            height=300
        )
        
        st.plotly_chart(resource_chart, use_container_width=True)
    
    with col2:
        # –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏
        health_score = intelligence.get('health_index', 85)
        
        health_gauge = go.Figure(go.Indicator(
            mode = "gauge+number+delta",
            value = health_score,
            domain = {'x': [0, 1], 'y': [0, 1]},
            title = {'text': "–Ü–Ω–¥–µ–∫—Å –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏"},
            delta = {'reference': 80},
            gauge = {
                'axis': {'range': [None, 100]},
                'bar': {'color': "darkblue"},
                'steps': [
                    {'range': [0, 50], 'color': "lightgray"},
                    {'range': [50, 80], 'color': "gray"}
                ],
                'threshold': {
                    'line': {'color': "red", 'width': 4},
                    'thickness': 0.75,
                    'value': 90
                }
            }
        ))
        
        health_gauge.update_layout(height=300)
        st.plotly_chart(health_gauge, use_container_width=True)

if __name__ == "__main__":
    launch_main_interface()