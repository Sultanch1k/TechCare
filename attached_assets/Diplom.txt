ДИПЛОМНА РОБОТА: TechCare - Смарт-нагадувач для догляду за комп'ютером

==============================================================================
ЗАГАЛЬНИЙ ОПИС ПРОЕКТУ
==============================================================================

TechCare - це інтелектуальна система моніторингу здоров'я комп'ютера з українськомовним інтерфейсом. Програма створена для допомоги користувачам у підтримці оптимального стану їх комп'ютерів через постійний моніторинг ключових параметрів системи та надання розумних рекомендацій.

ОСНОВНІ МОЖЛИВОСТІ:
- Реальний моніторинг температури процесора та навантаження
- Контроль використання оперативної пам'яті (RAM)
- Моніторинг використання дискового простору
- Відстеження часу роботи системи
- Розумний аналіз стану вентиляторів охолодження (Windows WMI + estimation)
- Перевірка актуальності драйверів обладнання (кросплатформенно)
- Інтелектуальний аналіз стану термопасти процесора
- Розрахунок загального індексу здоров'я системи (0-100 балів)
- Автоматичні розумні нагадування та попередження

ДОДАТКОВІ МОЖЛИВОСТІ (НОВИНКА):
- Аналіз програм в автозапуску та їх впливу на швидкість завантаження
- Детальна перевірка здоров'я дисків та рівня фрагментації  
- Моніторинг мережевої продуктивності та швидкості підключення
- Базова перевірка безпеки системи (антивірус, firewall, оновлення)
- Персоналізовані рекомендації для покращення продуктивності
- Інтелектуальні поради з оптимізації системи

==============================================================================
АРХІТЕКТУРА ТА СТРУКТУРА ПРОГРАМИ
==============================================================================

Програма побудована за модульним принципом з чіткою структурою:

1. ОСНОВНІ МОДУЛІ:

monitor.py - Базовий модуль моніторингу
- Отримання системних параметрів через бібліотеку psutil
- Форматування даних для відображення
- Розрахунок часу роботи системи
- Обробка температурних датчиків

reminder.py - Система нагадувань та аналізу
- Перевірка порогових значень параметрів
- Генерація попереджень на основі часових інтервалів
- Управління відкладенням нагадувань
- Ведення історії проблем системи

advanced_monitor.py - Розширений моніторинг
- Аналіз стану драйверів обладнання (Windows WMI + Linux lspci)
- Інтелектуальна оцінка стану термопасти
- Детальний аналіз роботи вентиляторів (WMI, psutil, estimation)
- Розрахунок загального індексу здоров'я системи (0-100 балів)

additional_features.py - Додаткові можливості (НОВЕ)
- Аналіз програм автозапуску та швидкості завантаження
- Перевірка здоров'я дисків і фрагментації
- Моніторинг мережевої продуктивності та DNS
- Базова перевірка системної безпеки
- Генерація персоналізованих рекомендацій

gui.py - Desktop інтерфейс (tkinter)
- Графічний інтерфейс для настільних комп'ютерів
- Темна тема з синіми акцентами
- Автоматичне оновлення даних
- Інтерактивні елементи управління

web_app.py - Веб-застосунок (Flask)
- Веб-інтерфейс для використання через браузер
- REST API для отримання системних даних
- Адаптивний дизайн
- Підтримка різних пристроїв

main.py - Головний модуль
- Координація роботи всіх компонентів
- Ініціалізація системи
- Управління потоками виконання

2. ФАЙЛИ ІНТЕРФЕЙСУ:

templates/index.html - HTML інтерфейс
- Адаптивна верстка з CSS3
- JavaScript для динамічного оновлення
- Модальні вікна для деталей
- Система сповіщень

==============================================================================
BACKEND ТЕХНОЛОГІЇ (СЕРВЕРНА ЧАСТИНА)
==============================================================================

1. ОСНОВНА МОВА ПРОГРАМУВАННЯ:
Python 3.11+ - вибрана за:
- Потужні бібліотеки для системного моніторингу
- Простоту роботи з операційною системою
- Кросплатформенність
- Багатий екосистем бібліотек

2. КЛЮЧОВІ БІБЛІОТЕКИ BACKEND:

psutil (7.0.0) - системний моніторинг:
Пояснення: Це основна бібліотека для отримання системної інформації
Функції:
- psutil.cpu_percent() - відсоток використання процесора
- psutil.virtual_memory() - інформація про RAM
- psutil.disk_usage() - використання дискового простору
- psutil.sensors_temperatures() - температурні датчики
- psutil.sensors_fans() - швидкість вентиляторів
- psutil.boot_time() - час запуску системи

schedule (1.2.2) - планувальник задач:
Пояснення: Автоматизує періодичні перевірки системи
Реалізація: schedule.every(10).seconds.do(check_function)
Призначення: Запуск моніторингу кожні 10 секунд без блокування інтерфейсу

Flask (3.1.1) - веб-фреймворк:
Пояснення: Створює веб-сервер і REST API
Компоненти:
- @app.route('/') - маршрути для сторінок
- jsonify() - перетворення даних у JSON
- render_template() - відображення HTML шаблонів

3. СИСТЕМНІ ВИКЛИКИ ТА КРОСПЛАТФОРМЕННІСТЬ:

Windows підтримка:
- subprocess.run(['powershell', '-Command', 'Get-WmiObject...']) 
- Отримання інформації про драйвери через WMI
- Аналіз дати драйверів для визначення застарілості
- Fallback механізми для psutil функцій (sensors_temperatures, sensors_fans)
- WMI запити для температурних датчиків (OpenHardwareMonitor namespace)
- Автоматичне виявлення доступних системних функцій

Linux підтримка:
- subprocess.run(['lspci', '-k']) - перевірка PCI пристроїв
- Читання /proc/modules - активні модулі ядра
- dmesg аналіз - системні повідомлення
- Fallback механізми для контейнерів

4. БАГАТОПОТОЧНІСТЬ:
threading.Thread(target=function, daemon=True)
Пояснення: Розділення GUI, моніторингу та планувальника на окремі потоки
Переваги: Інтерфейс не "зависає" під час системних операцій

==============================================================================
FRONTEND ТЕХНОЛОГІЇ (КЛІЄНТСЬКА ЧАСТИНА) 
==============================================================================

1. HTML5 СТРУКТУРА:
Семантична розмітка:
- <div class="container"> - основний контейнер
- <div class="parameter"> - кожен системний параметр
- <div class="modal"> - модальні вікна для деталей
- Доступність через title атрибути для підказок

2. CSS3 СТИЛІЗАЦІЯ:

Адаптивний дизайн:
```css
.container {
    max-width: 400px;
    margin: 0 auto;
    background: linear-gradient(135deg, #1E1E1E 0%, #2D2D2D 100%);
}
```

Кольорова схема:
- #1E1E1E до #2D2D2D - градієнтний темний фон
- #00DDEB - акцентний блакитний колір
- #00FF66 - зелений для нормальних значень
- #FF6347 - червоно-помаранчевий для попереджень
- #FF0000 - червоний для критичних проблем

Інтерактивні ефекти:
```css
.parameter:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 221, 235, 0.2);
}
```

3. JAVASCRIPT ФУНКЦІОНАЛЬНІСТЬ:

Асинхронні запити:
```javascript
async function fetchSystemData() {
    const response = await fetch('/api/system-data');
    const data = await response.json();
}
```

Автоматичне оновлення:
```javascript
setInterval(fetchSystemData, 10000); // Кожні 10 секунд
```

Динамічне оновлення DOM:
```javascript
document.getElementById('temp-value').textContent = systemData.temperature.value;
document.getElementById('temp-value').style.color = systemData.temperature.color;
```

Система сповіщень:
```javascript
function showNotification(title, message) {
    // Створення та анімація сповіщень
    notification.classList.add('show');
    setTimeout(() => notification.classList.remove('show'), 5000);
}
```

==============================================================================
ДЕТАЛЬНИЙ РОЗБІР BACKEND АЛГОРИТМІВ
==============================================================================

1. АРХІТЕКТУРА МОДУЛЬНОЇ СИСТЕМИ:

Модуль monitor.py (Базовий моніторинг):
Крок 1: Ініціалізація psutil
```python
def get_system_data():
    cpu_percent = psutil.cpu_percent(interval=1)
    temps = psutil.sensors_temperatures()
```

Крок 2: Обробка температурних датчиків
- Пошук серед різних джерел ('cpu', 'core' в назвах)
- Fallback на перший доступний датчик
- Якщо температура недоступна → використання CPU usage

Крок 3: Розрахунок часу роботи
```python
boot_time = psutil.boot_time()
uptime_seconds = time.time() - boot_time
uptime_delta = timedelta(seconds=uptime_seconds)
```

Модуль advanced_monitor.py (Розширений аналіз):

Алгоритм перевірки драйверів:
Крок 1: Визначення ОС через platform.system()
Крок 2А: Windows - WMI запити через PowerShell
```python
subprocess.run(['powershell', '-Command', 
'Get-WmiObject Win32_PnPSignedDriver | Select-Object DeviceName, DriverDate'])
```
Крок 2Б: Linux - Multiple fallback strategy
- Метод 1: lspci -k (аналіз PCI пристроїв)
- Метод 2: /proc/modules (підрахунок модулів ядра)
- Метод 3: dmesg (пошук згадок про драйвери)

Алгоритм аналізу термопасти:
```python
if avg_temp > 80 and cpu_percent < 50:
    # Висока температура при низькому навантаженні
    thermal_info['status'] = 'critical'
    thermal_info['estimated_paste_age'] = 'більше 3 років'
```

Логіка: Співвідношення температури до навантаження вказує на ефективність охолодження.

2. СИСТЕМА БАЛІВ ЗДОРОВ'Я (0-100):

Алгоритм розрахунку:
```python
score = 100
if fan_status['status'] == 'critical': score -= 30
if thermal_status['status'] == 'critical': score -= 35  
if driver_status['status'] == 'critical': score -= 35
```

Градація рівнів:
- 90-100: Відмінно (зелений #00FF66)
- 75-89: Добре (жовтий #FFFF00)  
- 60-74: Задовільно (помаранчевий #FF8C00)
- <60: Погано (червоний #FF6347)

3. СИСТЕМА НАГАДУВАНЬ З ЧАСОВИМИ ІНТЕРВАЛАМИ:

Алгоритм reminder.py:
```python
def check_thresholds(data, thresholds, state):
    current_time = time.time()
    
    # Перевірка температури протягом часу
    if temp_threshold_exceeded:
        if state.get('high_temp_time', 0) == 0:
            state['high_temp_time'] = current_time
        elif current_time - state['high_temp_time'] >= 1800:  # 30 хвилин
            warnings.append("Охолодіть систему!")
```

Логіка відкладення:
```python
if state.get('delay_until', 0) > current_time:
    return warnings  # Не показувати попередження
```

==============================================================================
ДЕТАЛЬНИЙ РОЗБІР FRONTEND АРХІТЕКТУРИ
==============================================================================

1. СТРУКТУРА HTML КОМПОНЕНТІВ:

Основний контейнер:
```html
<div class="container">
    <div class="header">
        <div class="title">TechCare</div>
        <div class="subtitle">Твій помічник для догляду за ПК</div>
    </div>
</div>
```

Параметри моніторингу:
```html
<div class="parameter" title="" id="temp-param">
    <span class="parameter-label">Температура:</span>
    <span class="parameter-value" id="temp-value">Завантаження...</span>
</div>
```

2. CSS АРХІТЕКТУРА ТА ДИЗАЙН-СИСТЕМА:

Методологія компонентного дизайну:
- .container - основний лейаут
- .parameter - переиспользуемый компонент параметра
- .btn - стилізована кнопка з hover ефектами
- .modal - модальне вікно для деталей

Responsive дизайн:
```css
.container {
    max-width: 400px;  /* Мобільна орієнтація */
    margin: 0 auto;    /* Центрування */
}
```

Анімації та переходи:
```css
.parameter:hover {
    transform: translateY(-2px);
    transition: all 0.3s ease;
}
```

3. JAVASCRIPT АРХІТЕКТУРА:

Event-driven система:
```javascript
document.addEventListener('DOMContentLoaded', function() {
    fetchSystemData();
    updateInterval = setInterval(fetchSystemData, 10000);
});
```

Асинхронна комунікація з backend:
```javascript
async function fetchSystemData() {
    try {
        const response = await fetch('/api/system-data');
        const data = await response.json();
        if (data.success) {
            updateDisplay(data);
            checkForWarnings(data.warnings);
        }
    } catch (error) {
        showNotification('Помилка з\'єднання', 'Не вдалося отримати дані');
    }
}
```

Управління станом DOM:
```javascript
function updateDisplay(data) {
    const { data: systemData, status, timestamp } = data;
    
    // Оновлення значень
    document.getElementById('temp-value').textContent = systemData.temperature.value;
    document.getElementById('temp-value').style.color = systemData.temperature.color;
    
    // Оновлення підказок
    document.getElementById('temp-param').title = 
        systemData.temperature.thermal_recommendation;
}
```

4. API DESIGN PATTERNS:

RESTful архітектура:
- GET /api/system-data - отримання поточного стану
- POST /api/clear-state - очищення лічильників  
- POST /api/postpone - відкладення нагадувань
- GET /api/history - історія проблем

JSON структура відповіді:
```json
{
  "success": true,
  "data": {
    "temperature": {
      "value": "45°C",
      "color": "#00FF66", 
      "thermal_recommendation": "Температура в нормі",
      "paste_age": "менше 1 року"
    }
  },
  "warnings": [],
  "timestamp": "15:23:45"
}
```

2. АНАЛІЗ ТЕРМОПАСТИ:

Розумний алгоритм визначення стану термопасти:
- Співвідношення температури до навантаження CPU
- Висока температура (>80°C) при низькому навантаженні (<50%) = стара термопаста
- Градація рекомендацій: критично (>3 років), попередження (2-3 роки), норма (<1 року)
- Врахування пікових температур

3. СИСТЕМА БАЛІВ ЗДОРОВ'я (0-100):

Розподіл балів:
- Вентилятори: 30 балів
- Термопаста/температура: 35 балів  
- Драйвери: 35 балів

Рівні здоров'я:
- 90-100 балів: Відмінно (зелений)
- 75-89 балів: Добре (жовтий)
- 60-74 балів: Задовільно (помаранчевий)
- <60 балів: Погано (червоний)

4. СИСТЕМА НАГАДУВАНЬ:

Розумні пороги з часовими інтервалами:
- Температура >70°C протягом 30 хвилин → попередження про охолодження
- RAM >90% протягом 15 хвилин → рекомендація закрити програми
- Диск >90% → негайне попередження
- Час роботи >24 години → рекомендація перезапуску

Функції управління:
- Відкладення нагадувань на 30 хвилин
- Очищення лічильників часу
- Історія всіх проблем

==============================================================================
ІНТЕРФЕЙС КОРИСТУВАЧА
==============================================================================

1. ДИЗАЙН:

Темна тема з акцентами:
- Основний фон: градієнт від #1E1E1E до #2D2D2D
- Акцентний колір: #00DDEB (блакитний)
- Позитивні значення: #00FF66 (зелений)
- Попередження: #FF6347 (червоно-помаранчевий)
- Критичні проблеми: #FF0000 (червоний)

2. ЕЛЕМЕНТИ ІНТЕРФЕЙСУ:

Головне вікно:
- Компактний розмір 400x500 пікселів
- Автоматичне оновлення кожні 10 секунд
- Кольорове кодування станів
- Підказки при наведенні (tooltips)

Параметри моніторингу:
- Температура/CPU з аналізом термопасти
- Час роботи з рекомендаціями перезапуску
- RAM з моніторингом навантаження
- Диск з попередженнями про переповнення
- Вентилятори з детальним статусом
- Драйвери з аналізом актуальності
- Загальне здоров'я системи (бал/100)

Кнопки управління:
- "Очистити" - скидання лічильників часу
- "Відкласти" - відкладення попереджень на 30 хв
- "Деталі" - розгорнута історія проблем
- "Оновити" - ручне оновлення даних

3. СИСТЕМА СПОВІЩЕНЬ:

Анімовані попередження:
- Автоматичне з'явлення справа вгорі
- Різні кольори залежно від типу проблеми
- Автоматичне зникнення через 5 секунд
- Історія всіх сповіщень

==============================================================================
ТЕХНІЧНІ ОСОБЛИВОСТІ РЕАЛІЗАЦІЇ
==============================================================================

1. БАГАТОПОТОЧНІСТЬ:

Асинхронна архітектура:
- Основний потік для GUI
- Окремий потік для планувальника нагадувань
- Потік для автоматичного оновлення даних
- Захист від блокування інтерфейсу

2. ОБРОБКА ПОМИЛОК:

Надійність системи:
- Try-catch блоки для всіх системних викликів
- Резервні механізми при недоступності датчиків
- Graceful degradation (програма працює навіть при частковій недоступності даних)
- Логування помилок для діагностики

3. КРОСПЛАТФОРМЕННІСТЬ:

Підтримка операційних систем:
- Windows: через WMI та PowerShell команди
- Linux: через системні утиліти (lspci, sensors)
- macOS: базова підтримка через psutil
- Автоматичне визначення платформи

4. ОПТИМІЗАЦІЯ ПРОДУКТИВНОСТІ:

Ефективне використання ресурсів:
- Кешування системних даних
- Обмежена частота запитів до системи
- Мінімальне навантаження на CPU
- Оптимізовані запити до температурних датчиків

==============================================================================
API ТА ІНТЕГРАЦІЯ
==============================================================================

REST API ENDPOINTS:

1. GET /api/system-data
   - Повертає повний набір системних даних
   - Включає розширений аналіз здоров'я
   - Формат: JSON з детальною структурою

2. POST /api/clear-state
   - Очищення лічильників часу
   - Скидання стану нагадувань

3. POST /api/postpone
   - Відкладення нагадувань
   - Параметр: кількість хвилин

4. GET /api/history
   - Отримання детальної історії проблем
   - Включає часові мітки та описи

СТРУКТУРА ДАНИХ API:
{
  "success": true,
  "data": {
    "temperature": {
      "value": "45°C",
      "color": "#00FF66",
      "thermal_recommendation": "...",
      "paste_age": "менше 1 року"
    },
    "drivers": {
      "value": "Застарілих: 0",
      "status": "good",
      "outdated_count": 0
    },
    "health_score": {
      "value": "95/100",
      "level": "Відмінно",
      "issues": []
    }
  },
  "warnings": [],
  "detailed_analysis": {...}
}

==============================================================================
ПЕРЕВАГИ ТА ІННОВАЦІЇ ПРОЕКТУ
==============================================================================

1. УКРАЇНСЬКА ЛОКАЛІЗАЦІЯ:
- Повністю українськомовний інтерфейс
- Зрозумілі рекомендації простою мовою
- Культурно адаптований контент

2. ІНТЕЛЕКТУАЛЬНИЙ АНАЛІЗ:
- Не просто відображення даних, а аналіз стану
- Прогнозування проблем (стан термопасти)
- Комплексна оцінка здоров'я системи

3. УНІВЕРСАЛЬНІСТЬ:
- Два типи інтерфейсу (desktop + web)
- Підтримка різних операційних систем
- Адаптація до доступних датчиків

4. КОРИСТУВАЦЬКИЙ ДОСВІД:
- Інтуїтивний інтерфейс
- Автоматичні рекомендації
- Гнучкі налаштування нагадувань

==============================================================================
МОЖЛИВОСТІ РОЗШИРЕННЯ
==============================================================================

1. ДОДАТКОВІ ФУНКЦІЇ:
- Інтеграція з хмарними сервісами
- Мобільний додаток
- Порівняння з еталонними показниками
- Експорт звітів

2. ПОКРАЩЕННЯ АНАЛІТИКИ:
- Машинне навчання для прогнозування поломок
- Більш точний аналіз термопасти
- Інтеграція з базами даних драйверів

3. СОЦІАЛЬНІ ФУНКЦІЇ:
- Спільнота користувачів
- Обмін досвідом та рекомендаціями
- Рейтинги конфігурацій

==============================================================================
ВИСНОВКИ
==============================================================================

TechCare представляє собою комплексне рішення для моніторингу здоров'я комп'ютера, що поєднує в собі:

- Сучасні технології веб-розробки та desktop застосунків
- Розумний аналіз системних параметрів
- Інтуїтивний українськомовний інтерфейс
- Практичні рекомендації для користувачів

Проект демонструє навички роботи з:
- Системним програмуванням на Python
- Веб-технологіями (Flask, HTML/CSS/JS)
- API дизайном та REST архітектурою
- UI/UX дизайном
- Багатопоточним програмуванням
- Обробкою помилок та забезпеченням надійності

TechCare є практично корисним застосунком, який може реально допомогти користувачам у підтримці здоров'я їх комп'ютерів, що робить його цінним внеском у сферу системного адміністрування та користувацького досвіду.

==============================================================================