# -*- coding: utf-8 -*-
"""
TechCare AI - Gamification System Module
–ú–æ–¥—É–ª—å –≥–µ–π–º–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
"""

import pandas as pd
from datetime import datetime, timedelta
import json

class GamificationSystem:
    def __init__(self, data_manager):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –≥–µ–π–º–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
        self.data_manager = data_manager
        self.achievement_definitions = self.init_achievements()
        self.reward_definitions = self.init_rewards()
    
    def init_achievements(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∏–∑–Ω–∞—á–µ–Ω—å –¥–æ—Å—è–≥–Ω–µ–Ω—å"""
        return {
            'first_launch': {
                'name': '–ü–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫',
                'description': '–ó–∞–ø—É—Å—Ç—ñ—Ç—å TechCare AI –≤–ø–µ—Ä—à–µ',
                'exp_reward': 100,
                'category': '–ø–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å',
                'icon': 'üöÄ'
            },
            'daily_user': {
                'name': '–©–æ–¥–µ–Ω–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á',
                'description': '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ TechCare AI 7 –¥–Ω—ñ–≤ –ø–æ—Å–ø—ñ–ª—å',
                'exp_reward': 500,
                'category': '–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
                'icon': 'üìÖ'
            },
            'system_optimizer': {
                'name': '–û–ø—Ç–∏–º—ñ–∑–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–∏',
                'description': '–í–∏–∫–æ–Ω–∞–π—Ç–µ 10 –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ–π',
                'exp_reward': 300,
                'category': '–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è',
                'icon': '‚ö°'
            },
            'benchmark_master': {
                'name': '–ú–∞–π—Å—Ç–µ—Ä –±–µ–Ω—á–º–∞—Ä–∫—É',
                'description': '–ó–∞–ø—É—Å—Ç—ñ—Ç—å 5 –±–µ–Ω—á–º–∞—Ä–∫—ñ–≤',
                'exp_reward': 250,
                'category': '—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è',
                'icon': 'üìä'
            },
            'health_monitor': {
                'name': '–°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á –∑–¥–æ—Ä–æ–≤\'—è',
                'description': '–ü—ñ–¥—Ç—Ä–∏–º—É–π—Ç–µ –∑–¥–æ—Ä–æ–≤\'—è –ü–ö –≤–∏—â–µ 90% –ø—Ä–æ—Ç—è–≥–æ–º —Ç–∏–∂–Ω—è',
                'exp_reward': 400,
                'category': '–∑–¥–æ—Ä–æ–≤\'—è',
                'icon': '‚ù§Ô∏è'
            },
            'problem_solver': {
                'name': '–†–æ–∑–≤\'—è–∑—É–≤–∞—á –ø—Ä–æ–±–ª–µ–º',
                'description': '–í–∏–ø—Ä–∞–≤—Ç–µ 5 –ø—Ä–æ–±–ª–µ–º —Å–∏—Å—Ç–µ–º–∏',
                'exp_reward': 350,
                'category': '—Ä–µ–º–æ–Ω—Ç',
                'icon': 'üîß'
            },
            'data_collector': {
                'name': '–ó–±–∏—Ä–∞—á –¥–∞–Ω–∏—Ö',
                'description': '–ó–±–µ—Ä—ñ—Ç—å 1000 –∑–∞–ø–∏—Å—ñ–≤ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –¥–∞–Ω–∏—Ö',
                'exp_reward': 200,
                'category': '–¥–∞–Ω—ñ',
                'icon': 'üìà'
            },
            'streak_hero': {
                'name': '–ì–µ—Ä–æ–π —Å–µ—Ä—ñ—ó',
                'description': '–î–æ—Å—è–≥–Ω—ñ—Ç—å 30-–¥–µ–Ω–Ω–æ—ó —Å–µ—Ä—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è',
                'exp_reward': 1000,
                'category': '–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
                'icon': 'üî•'
            },
            'performance_guru': {
                'name': '–ì—É—Ä—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ',
                'description': '–ü–æ–∫—Ä–∞—â—Ç–µ –∑–∞–≥–∞–ª—å–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –Ω–∞ 20%',
                'exp_reward': 600,
                'category': '–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
                'icon': 'üèÜ'
            },
            'security_expert': {
                'name': '–ï–∫—Å–ø–µ—Ä—Ç –±–µ–∑–ø–µ–∫–∏',
                'description': '–ü—Ä–æ–π–¥—ñ—Ç—å –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–∑–ø–µ–∫–∏',
                'exp_reward': 450,
                'category': '–±–µ–∑–ø–µ–∫–∞',
                'icon': 'üõ°Ô∏è'
            }
        }
    
    def init_rewards(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–≥–æ—Ä–æ–¥"""
        return [
            {
                'id': 'theme_unlock',
                'name': '–ù–æ–≤–∞ —Ç–µ–º–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É',
                'description': '–í—ñ–¥–∫—Ä–∏–π—Ç–µ –¥–æ–¥–∞—Ç–∫–æ–≤—É —Ç–µ–º—É –¥–ª—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É',
                'cost': 500,
                'type': 'cosmetic',
                'icon': 'üé®'
            },
            {
                'id': 'advanced_reports',
                'name': '–†–æ–∑—à–∏—Ä–µ–Ω—ñ –∑–≤—ñ—Ç–∏',
                'description': '–î–æ—Å—Ç—É–ø –¥–æ –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤',
                'cost': 1000,
                'type': 'feature',
                'icon': 'üìã'
            },
            {
                'id': 'priority_support',
                'name': '–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞',
                'description': '–®–≤–∏–¥—à–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏',
                'cost': 1500,
                'type': 'service',
                'icon': 'üé´'
            },
            {
                'id': 'custom_alerts',
                'name': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è',
                'description': '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–ª–∞—Å–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª —Å–ø–æ–≤—ñ—â–µ–Ω—å',
                'cost': 800,
                'type': 'feature',
                'icon': 'üîî'
            },
            {
                'id': 'export_data',
                'name': '–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö',
                'description': '–ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –µ–∫—Å–ø–æ—Ä—Ç—É –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö',
                'cost': 600,
                'type': 'feature',
                'icon': 'üíæ'
            }
        ]
    
    def get_user_stats(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        return self.data_manager.get_user_stats()
    
    def award_experience(self, activity_type, exp_amount, description=""):
        """–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –¥–æ—Å–≤—ñ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        try:
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            self.data_manager.save_user_activity(activity_type, exp_amount, description)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å
            self.check_achievements()
            
            return True
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –¥–æ—Å–≤—ñ–¥—É: {e}")
            return False
    
    def check_achievements(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–æ—Å—è–≥–Ω–µ–Ω—å"""
        user_stats = self.get_user_stats()
        unlocked_achievements = []
        
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω–æ–≥–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
            for achievement_id, achievement_info in self.achievement_definitions.items():
                if not self.is_achievement_unlocked(achievement_id):
                    if self.check_achievement_condition(achievement_id, user_stats):
                        if self.data_manager.unlock_achievement(achievement_id):
                            unlocked_achievements.append(achievement_info['name'])
            
            return unlocked_achievements
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—è–≥–Ω–µ–Ω—å: {e}")
            return []
    
    def check_achievement_condition(self, achievement_id, user_stats):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è"""
        try:
            if achievement_id == 'first_launch':
                return user_stats['total_exp'] > 0
            
            elif achievement_id == 'daily_user':
                return user_stats['streak'] >= 7
            
            elif achievement_id == 'system_optimizer':
                # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ–π –∑ —ñ—Å—Ç–æ—Ä—ñ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                optimization_count = self.count_activity_type('optimization')
                return optimization_count >= 10
            
            elif achievement_id == 'benchmark_master':
                benchmark_count = self.count_activity_type('benchmark')
                return benchmark_count >= 5
            
            elif achievement_id == 'health_monitor':
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–¥–æ—Ä–æ–≤'—è –≤–∏—â–µ 90% –ø—Ä–æ—Ç—è–≥–æ–º —Ç–∏–∂–Ω—è
                return self.check_health_maintenance(90, 7)
            
            elif achievement_id == 'problem_solver':
                repair_count = self.count_activity_type('repair')
                return repair_count >= 5
            
            elif achievement_id == 'data_collector':
                # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–ø–∏—Å—ñ–≤ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                data_count = self.count_system_data_records()
                return data_count >= 1000
            
            elif achievement_id == 'streak_hero':
                return user_stats['streak'] >= 30
            
            elif achievement_id == 'performance_guru':
                return self.check_performance_improvement(20)
            
            elif achievement_id == 'security_expert':
                return self.check_security_completion()
            
            return False
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É–º–æ–≤–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è {achievement_id}: {e}")
            return False
    
    def is_achievement_unlocked(self, achievement_id):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ"""
        try:
            conn = self.data_manager.db_path
            import sqlite3
            conn = sqlite3.connect(self.data_manager.db_path)
            cursor = conn.cursor()
            
            cursor.execute('SELECT unlocked FROM user_achievements WHERE achievement_id = ?', [achievement_id])
            result = cursor.fetchone()
            
            conn.close()
            
            return result and result[0] == 1
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è: {e}")
            return False
    
    def get_achievements(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–æ—Å—è–≥–Ω–µ–Ω—å –∑ —ó—Ö —Å—Ç–∞—Ç—É—Å–æ–º"""
        try:
            import sqlite3
            conn = sqlite3.connect(self.data_manager.db_path)
            cursor = conn.cursor()
            
            achievements = []
            for achievement_id, achievement_info in self.achievement_definitions.items():
                cursor.execute('''
                    SELECT unlocked, unlocked_date, progress 
                    FROM user_achievements 
                    WHERE achievement_id = ?
                ''', [achievement_id])
                
                result = cursor.fetchone()
                
                achievement_data = {
                    'id': achievement_id,
                    'name': achievement_info['name'],
                    'description': achievement_info['description'],
                    'exp_reward': achievement_info['exp_reward'],
                    'category': achievement_info['category'],
                    'icon': achievement_info['icon'],
                    'unlocked': bool(result[0]) if result else False,
                    'unlocked_date': result[1] if result and result[1] else None,
                    'progress': result[2] if result else 0,
                    'target': 100  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Ü—ñ–ª—å
                }
                
                achievements.append(achievement_data)
            
            conn.close()
            return achievements
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—è–≥–Ω–µ–Ω—å: {e}")
            return []
    
    def get_activity_history(self, days=30):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        try:
            import sqlite3
            conn = sqlite3.connect(self.data_manager.db_path)
            
            since_date = datetime.now() - timedelta(days=days)
            query = '''
                SELECT date, SUM(exp_earned) as exp_earned
                FROM user_activity 
                WHERE date >= ?
                GROUP BY date
                ORDER BY date
            '''
            
            df = pd.read_sql_query(query, conn, params=[since_date.date()])
            
            if not df.empty:
                df['date'] = pd.to_datetime(df['date'])
            
            conn.close()
            return df
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")
            return pd.DataFrame()
    
    def get_category_stats(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        try:
            import sqlite3
            conn = sqlite3.connect(self.data_manager.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT activity_type, SUM(exp_earned) as total_exp
                FROM user_activity
                GROUP BY activity_type
            ''')
            
            results = cursor.fetchall()
            conn.close()
            
            category_stats = {}
            for activity_type, total_exp in results:
                category_stats[activity_type] = total_exp
            
            return category_stats
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {e}")
            return {}
    
    def get_streak_stats(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ streak"""
        try:
            import sqlite3
            conn = sqlite3.connect(self.data_manager.db_path)
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            query = '''
                SELECT DISTINCT date 
                FROM user_activity 
                ORDER BY date DESC
            '''
            
            df = pd.read_sql_query(query, conn)
            conn.close()
            
            if df.empty:
                return {'current': 0, 'longest': 0, 'average': 0, 'total_streaks': 0}
            
            df['date'] = pd.to_datetime(df['date'])
            dates = df['date'].dt.date.tolist()
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ streaks
            streaks = []
            current_streak = 1
            longest_streak = 1
            
            for i in range(1, len(dates)):
                if (dates[i-1] - dates[i]).days == 1:
                    current_streak += 1
                else:
                    streaks.append(current_streak)
                    longest_streak = max(longest_streak, current_streak)
                    current_streak = 1
            
            streaks.append(current_streak)
            longest_streak = max(longest_streak, current_streak)
            
            # –ü–æ—Ç–æ—á–Ω–∏–π streak (–≤—ñ–¥ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –¥–∞—Ç–∏ –¥–æ —Å—å–æ–≥–æ–¥–Ω—ñ)
            today = datetime.now().date()
            current_active_streak = 0
            
            if dates and (today - dates[0]).days <= 1:
                current_active_streak = current_streak
            
            return {
                'current': current_active_streak,
                'longest': longest_streak,
                'average': sum(streaks) / len(streaks) if streaks else 0,
                'total_streaks': len(streaks)
            }
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É streak —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'current': 0, 'longest': 0, 'average': 0, 'total_streaks': 0}
    
    def get_available_rewards(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –Ω–∞–≥–æ—Ä–æ–¥"""
        return self.reward_definitions
    
    def redeem_reward(self, reward_id):
        """–í–∏–∫—É–ø –Ω–∞–≥–æ—Ä–æ–¥–∏"""
        try:
            # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏
            reward = next((r for r in self.reward_definitions if r['id'] == reward_id), None)
            if not reward:
                return {'success': False, 'message': '–ù–∞–≥–æ—Ä–æ–¥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞'}
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_stats = self.get_user_stats()
            if user_stats['reward_points'] < reward['cost']:
                return {'success': False, 'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª—ñ–≤'}
            
            # –°–ø–∏—Å–∞–Ω–Ω—è –±–∞–ª—ñ–≤ (—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –ª–æ–≥—ñ–∫–∏ —Å–∏—Å—Ç–µ–º–∏)
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–∫—É–ø–ª–µ–Ω–∏—Ö –Ω–∞–≥–æ—Ä–æ–¥
            
            return {'success': True, 'message': f'–ù–∞–≥–æ—Ä–æ–¥—É "{reward["name"]}" —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!'}
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫—É–ø—É –Ω–∞–≥–æ—Ä–æ–¥–∏: {e}")
            return {'success': False, 'message': '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫—É–ø—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏'}
    
    def get_leaderboard(self, limit=10):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º—É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É —Ç—É—Ç –±–∏ –±—É–ª–∞ –ª–æ–≥—ñ–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        user_stats = self.get_user_stats()
        
        return [{
            'rank': 1,
            'username': '–ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á',
            'level': user_stats['level'],
            'exp': user_stats['total_exp'],
            'achievements': user_stats['achievements_unlocked']
        }]
    
    # –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É–º–æ–≤ –¥–æ—Å—è–≥–Ω–µ–Ω—å
    def count_activity_type(self, activity_type):
        """–ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –ø–µ–≤–Ω–æ–≥–æ —Ç–∏–ø—É"""
        try:
            import sqlite3
            conn = sqlite3.connect(self.data_manager.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT COUNT(*) FROM user_activity 
                WHERE activity_type = ?
            ''', [activity_type])
            
            result = cursor.fetchone()
            conn.close()
            
            return result[0] if result else 0
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")
            return 0
    
    def count_system_data_records(self):
        """–ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–ø–∏—Å—ñ–≤ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
        try:
            import sqlite3
            conn = sqlite3.connect(self.data_manager.db_path)
            cursor = conn.cursor()
            
            cursor.execute('SELECT COUNT(*) FROM system_data')
            result = cursor.fetchone()
            conn.close()
            
            return result[0] if result else 0
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –¥–∞–Ω–∏—Ö: {e}")
            return 0
    
    def check_health_maintenance(self, threshold, days):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏"""
        try:
            # –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ –¥–Ω—ñ
            # (—Å–ø—Ä–æ—â–µ–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è)
            historical_data = self.data_manager.get_historical_data(days=days)
            
            if historical_data.empty:
                return False
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ "–∑–¥–æ—Ä–æ–≤'—è" –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫
            health_scores = []
            for _, row in historical_data.iterrows():
                score = 100
                
                # –ó–Ω–∏–∂–µ–Ω–Ω—è –∑–∞ –≤–∏—Å–æ–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
                if row.get('cpu_percent', 0) > 80:
                    score -= 20
                if row.get('ram_percent', 0) > 90:
                    score -= 15
                if row.get('disk_percent', 0) > 90:
                    score -= 10
                
                health_scores.append(max(0, score))
            
            if health_scores:
                avg_health = sum(health_scores) / len(health_scores)
                return avg_health >= threshold
            
            return False
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è: {e}")
            return False
    
    def check_performance_improvement(self, threshold_percent):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        try:
            # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ç–∞ –º–∏–Ω—É–ª–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            # (—Å–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞)
            current_data = self.data_manager.get_historical_data(days=7)
            past_data = self.data_manager.get_historical_data(days=14)
            
            if current_data.empty or past_data.empty:
                return False
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            current_performance = self.calculate_avg_performance(current_data)
            past_performance = self.calculate_avg_performance(past_data.iloc[:-len(current_data)])
            
            if past_performance > 0:
                improvement = ((current_performance - past_performance) / past_performance) * 100
                return improvement >= threshold_percent
            
            return False
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")
            return False
    
    def calculate_avg_performance(self, data):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        if data.empty:
            return 0
        
        # –°–ø—Ä–æ—â–µ–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–±–µ—Ä–Ω–µ–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        avg_cpu = data['cpu_percent'].mean() if 'cpu_percent' in data else 0
        avg_ram = data['ram_percent'].mean() if 'ram_percent' in data else 0
        avg_disk = data['disk_percent'].mean() if 'disk_percent' in data else 0
        
        # –û–±–µ—Ä–Ω–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ - –º–µ–Ω—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è = –∫—Ä–∞—â–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        performance = 100 - ((avg_cpu + avg_ram + avg_disk) / 3)
        return max(0, performance)
    
    def check_security_completion(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –±–µ–∑–ø–µ–∫–∏"""
        try:
            # –¢—É—Ç –±–∏ –±—É–ª–∞ –ª–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—Å—ñ—Ö –ø—Ä–æ–π–¥–µ–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –±–µ–∑–ø–µ–∫–∏
            # (—Å–ø—Ä–æ—â–µ–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è)
            return True  # –ó–∞–≥–ª—É—à–∫–∞
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–∑–ø–µ–∫–∏: {e}")
            return False
