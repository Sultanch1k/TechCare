# -*- coding: utf-8 -*-
"""
–º—ñ–π –ø—Ä–æ—Å—Ç–∏–π —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
–∑—Ä–æ–±–∏–≤ —Å–∞–º –±–µ–∑ –≥–æ—Ç–æ–≤–∏—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫ –º–∞—à–∏–Ω–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è
"""

class SimpleAI:
    def __init__(self, data_manager):
        self.data_manager = data_manager
        # –°—Ç–∞–Ω –¥–ª—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ —á–∞—Å—É
        self.state = {
            'high_temp_start': None,
            'high_ram_start': None,
            'last_check': None
        }
    
    def predict_system_health(self, data):
        """–ü—Ä–æ–≥–Ω–æ–∑—É—î –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏ –∑ —á–∞—Å–æ–≤–∏–º–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞–º–∏"""
        import time
        warnings = []
        current_time = time.time()
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ > 85¬∞C –∞–±–æ CPU > 80% –ø—Ä–æ—Ç—è–≥–æ–º 30 —Ö–≤–∏–ª–∏–Ω
        temperature = data.get('temperature', 45)
        if temperature is None:
            temperature = 45
        temp_high = temperature > 85 or data['cpu_percent'] > 80
        if temp_high:
            if self.state['high_temp_start'] is None:
                self.state['high_temp_start'] = current_time
            elif (current_time - self.state['high_temp_start']) > 1800:  # 30 —Ö–≤–∏–ª–∏–Ω
                warnings.append("–û—Ö–æ–ª–æ–¥—ñ—Ç—å —Å–∏—Å—Ç–µ–º—É! –í–∏—Å–æ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±—ñ–ª—å—à–µ 30 —Ö–≤–∏–ª–∏–Ω")
        else:
            self.state['high_temp_start'] = None
        
        # RAM > 90% –ø—Ä–æ—Ç—è–≥–æ–º 15 —Ö–≤–∏–ª–∏–Ω
        if data['ram_percent'] > 90:
            if self.state['high_ram_start'] is None:
                self.state['high_ram_start'] = current_time
            elif (current_time - self.state['high_ram_start']) > 900:  # 15 —Ö–≤–∏–ª–∏–Ω
                warnings.append("–ó–∞–∫—Ä–∏–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–∏ –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å! –ü–∞–º'—è—Ç—å –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∞")
        else:
            self.state['high_ram_start'] = None
        
        # –î–∏—Å–∫ > 90%
        if data['disk_percent'] > 90:
            warnings.append("–û—á–∏—Å—Ç—ñ—Ç—å —Ñ–∞–π–ª–∏! –î–∏—Å–∫ –º–∞–π–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π")
        
        # –ß–∞—Å —Ä–æ–±–æ—Ç–∏ > 24 –≥–æ–¥–∏–Ω–∏
        if data.get('uptime_hours', 0) > 24:
            warnings.append("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ! –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –±—ñ–ª—å—à–µ –¥–æ–±–∏")
        
        # –ó–≤–∏—á–∞–π–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        if data['cpu_percent'] > 80:
            warnings.append("–ü—Ä–æ—Ü–µ—Å–æ—Ä —Å–∏–ª—å–Ω–æ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π")
        
        if data['ram_percent'] > 85:
            warnings.append("–ú–∞–ª–æ –≤—ñ–ª—å–Ω–æ—ó –ø–∞–º'—è—Ç—ñ")
        
        # –ü—Ä–∞–≥–º–∞—Ç–∏—á–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —ñ–Ω–¥–µ–∫—Å—É –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏
        health_score = 100
        
        # CPU: –±—ñ–ª—å—à –º'—è–∫—ñ –ø–æ—Ä–æ–≥–∏
        cpu_usage = data['cpu_percent']
        if cpu_usage < 20:
            cpu_penalty = 0
        elif cpu_usage < 50:
            cpu_penalty = (cpu_usage - 20) * 0.1  # –Ω–µ–≤–µ–ª–∏–∫–∞ –∑–Ω–∏–∂–µ–Ω–Ω—è
        elif cpu_usage < 80:
            cpu_penalty = 3 + (cpu_usage - 50) * 0.2  # –ø–æ–º—ñ—Ä–Ω–µ –∑–Ω–∏–∂–µ–Ω–Ω—è
        else:
            cpu_penalty = 9 + (cpu_usage - 80) * 0.4  # –∑–Ω–∞—á–Ω–µ –∑–Ω–∏–∂–µ–Ω–Ω—è
        
        # RAM: –≤—Ä–∞—Ö–æ–≤—É—î–º–æ —â–æ 70-80% —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        ram_usage = data['ram_percent']
        if ram_usage < 50:
            ram_penalty = 0
        elif ram_usage < 75:
            ram_penalty = (ram_usage - 50) * 0.08
        elif ram_usage < 90:
            ram_penalty = 2 + (ram_usage - 75) * 0.3
        else:
            ram_penalty = 6.5 + (ram_usage - 90) * 0.5
        
        # –î–∏—Å–∫: –º–µ–Ω—à–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –Ω—ñ–∂ RAM/CPU
        disk_usage = data['disk_percent']
        if disk_usage < 60:
            disk_penalty = 0
        elif disk_usage < 85:
            disk_penalty = (disk_usage - 60) * 0.05
        else:
            disk_penalty = 1.25 + (disk_usage - 85) * 0.2
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ—à—ñ –ø–æ—Ä–æ–≥–∏
        temp = data.get('temperature', 45)
        if temp is None:
            temp = 45
        if temp > 85:
            temp_penalty = 15  # –∫—Ä–∏—Ç–∏—á–Ω–æ
        elif temp > 75:
            temp_penalty = 8   # –≤–∏—Å–æ–∫–æ
        elif temp > 65:
            temp_penalty = 3   # —Ç–µ–ø–ª–æ
        else:
            temp_penalty = 0   # –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        
        health_score -= cpu_penalty + ram_penalty + disk_penalty + temp_penalty
        health_score = max(15, min(100, int(health_score)))  # –º—ñ–Ω—ñ–º—É–º 15%, –º–∞–∫—Å–∏–º—É–º 100%
        
        # –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –ø—Ä–æ–±–ª–µ–º –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó
        predictions = self._predict_future_issues(data)
        
        return {
            'warnings': warnings,
            'health_score': health_score,
            'predictions': predictions
        }
    
    def _predict_future_issues(self, current_data):
        """–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –ø—Ä–æ–±–ª–µ–º –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–∏—Ö —Ç–µ–Ω–¥–µ–Ω—Ü—ñ–π"""
        predictions = []
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–µ–Ω–¥–µ–Ω—Ü—ñ–π
        try:
            historical_data = self.data_manager.get_historical_data(days=3)
            
            if len(historical_data) >= 5:
                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç—Ä–µ–Ω–¥–∏ CPU
                cpu_values = [float(d.get('cpu_percent', 0)) for d in historical_data[-5:]]
                cpu_trend = sum(cpu_values[-3:]) / 3 - sum(cpu_values[:2]) / 2
                
                if cpu_trend > 10:
                    predictions.append("üìà CPU –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑—Ä–æ—Å—Ç–∞—î - –º–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ —á–µ—Ä–µ–∑ 2-3 –≥–æ–¥–∏–Ω–∏")
                
                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç—Ä–µ–Ω–¥–∏ RAM
                ram_values = [float(d.get('ram_percent', 0)) for d in historical_data[-5:]]
                ram_trend = sum(ram_values[-3:]) / 3 - sum(ram_values[:2]) / 2
                
                if ram_trend > 15:
                    predictions.append("üìà –ü–∞–º'—è—Ç—å –∑–∞–ø–æ–≤–Ω—é—î—Ç—å—Å—è - —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º –¥–Ω—è")
                
                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
                temp_values = [float(d.get('temperature', 40)) for d in historical_data[-5:]]
                avg_temp = sum(temp_values) / len(temp_values)
                
                if avg_temp > 60:
                    predictions.append("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—ñ–¥–≤–∏—â–µ–Ω–∞ –æ—Å—Ç–∞–Ω–Ω—ñ –¥–Ω—ñ - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –æ—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è")
        except:
            pass
        
        # –ë–∞–∑–æ–≤—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        current_cpu = current_data['cpu_percent']
        current_ram = current_data['ram_percent']
        current_disk = current_data['disk_percent']
        
        if current_cpu > 70 and current_ram > 70:
            predictions.append("‚ö†Ô∏è –í–∏—Å–æ–∫–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ - –º–æ–∂–ª–∏–≤—ñ –∑–∞–≤–∏—Å–∞–Ω–Ω—è")
        
        if current_disk > 95:
            predictions.append("üíæ –î–∏—Å–∫ –º–∞–π–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π - —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ —Å—Ç–∞—Ç–∏ –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–æ—é")
        
        if current_ram > 90:
            predictions.append("üîÑ –ü–∞–º'—è—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–æ –º–∞–ª–æ - —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è")
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞–π–±—É—Ç–Ω—î
        uptime = current_data.get('uptime_hours', 0)
        if uptime > 48:
            predictions.append("‚è∞ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –¥–æ–≤–≥–æ - —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ")
        
        if not predictions:
            health_score = 100 - (current_cpu * 0.2 + current_ram * 0.3 + current_disk * 0.2)
            if health_score > 80:
                predictions.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î —Å—Ç–∞–±—ñ–ª—å–Ω–æ - –ø—Ä–æ–±–ª–µ–º–∏ –Ω–µ –ø—Ä–æ–≥–Ω–æ–∑—É—é—Ç—å—Å—è")
            else:
                predictions.append("üìä –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤")
        
        return predictions